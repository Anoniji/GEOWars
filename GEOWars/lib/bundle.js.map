{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/GEOWars.js","webpack:///./lib/game.js","webpack:///./lib/game_object.js","webpack:///./lib/game_objects/bullet.js","webpack:///./lib/game_objects/enemies/arrow.js","webpack:///./lib/game_objects/enemies/boxbox.js","webpack:///./lib/game_objects/enemies/grunt.js","webpack:///./lib/game_objects/enemies/pinwheel.js","webpack:///./lib/game_objects/enemies/singularity.js","webpack:///./lib/game_objects/enemies/weaver.js","webpack:///./lib/game_objects/ship.js","webpack:///./lib/game_view.js","webpack:///./lib/particles/bullet_wall_explosion.js","webpack:///./lib/particles/enemy_spawn.js","webpack:///./lib/particles/particle.js","webpack:///./lib/particles/particle_explosion.js","webpack:///./lib/particles/singularity_explosion.js","webpack:///./lib/sound.js","webpack:///./lib/util.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;ACnEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;ACXD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,sBAAsB;AAC1D,wCAAwC,uBAAuB;AAC/D,yCAAyC,mCAAmC;AAC5E,kCAAkC,qBAAqB;AACvD,oCAAoC,qBAAqB;AACzD,8CAA8C,qBAAqB;AACnE;;AAEA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;;AAEA;;AAEA;AACA,mBAAmB,oBAAoB;AACvC,2BAA2B,YAAY;AACvC;AACA,mBAAmB,wBAAwB;AAC3C,6BAA6B,WAAW;AACxC;AACA,mBAAmB,qBAAqB;AACxC,0BAA0B,aAAa;AACvC;AACA,mBAAmB,qBAAqB;AACxC,0BAA0B,aAAa;AACvC;AACA,mBAAmB,sBAAsB;AACzC,2BAA2B,aAAa;AACxC;AACA,mBAAmB,4BAA4B;AAC/C,gCAAgC,4DAA4D;AAC5F;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;AACL;AACA;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,sBAAsB,gBAAgB;AACtC;AACA;;AAEA;AACA;AACA,OAAO;;AAEP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;;AAEA;AACA,uDAAuD;AACvD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,uBAAuB;AAC1C,qBAAqB,wBAAwB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;;;AAGA;AACA;AACA;AACA,KAAK;AACL;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,C;;;;;;;;;;;ACraA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,S;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;;;AAGA;AACA;;AAEA;;AAEA;;;;;;;;;;;;ACvEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,8BAA8B;AAC9B,0BAA0B;AAC1B,6BAA6B;;AAE7B;AACA;AACA;;AAEA;;AAEA;;;AAGA;AACA;;AAEA;;AAEA,0C;;;;;;;;;;;AC1DA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;;;AAGA,mCAAmC;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA;AACA;;AAEA;AACA;AACA,0BAA0B;AAC1B,6BAA6B;AAC7B,6BAA6B;AAC7B,yBAAyB;AACzB,8BAA8B;AAC9B,8BAA8B;AAC9B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;AAIA;AACA,uB;;;;;;;;;;;ACtHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,0C;;;;;;;;;;;ACtGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;;AAGA;AACA;AACA,K;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;;AAEA;AACA;AACA,0BAA0B;AAC1B,yBAAyB;AACzB,yBAAyB;AACzB,2BAA2B;AAC3B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,0C;;;;;;;;;;;ACvIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB,uBAAuB;AACvB,sBAAsB;AACtB,qBAAqB;AACrB,sBAAsB;AACtB,qBAAqB;AACrB,qBAAqB;AACrB,qBAAqB;AACrB,qBAAqB;AACrB,qBAAqB;AACrB,sBAAsB;AACtB,sBAAsB;AACtB,oBAAoB;;AAEpB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;;;AAIA;AACA,0B;;;;;;;;;;;AClHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,0C;;;;;;;;;;;ACzKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,sBAAsB;AACtB,qBAAqB;AACrB,qBAAqB;AACrB,sBAAsB;AACtB,sBAAsB;AACtB,+BAA+B;AAC/B,8BAA8B;AAC9B,6BAA6B;AAC7B,8BAA8B;AAC9B,+BAA+B;AAC/B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,0C;;;;;;;;;;;AClLA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,iBAAiB,OAAO;AACxB;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA,O;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;AClMA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,kBAAkB,EAAE;AACxC,KAAK;;AAEL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;;AAEL;AACA,iBAAiB;AACjB,iBAAiB;AACjB;;AAEA;;AAEA,KAAK;;AAEL,2BAA2B,mBAAmB,EAAE;AAChD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC/EA;;;AAGA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,mBAAmB,sBAAsB;AACzC;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;;;;AAKA,uC;;;;;;;;;;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,4B;;;;;;;;;;;ACjDA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,oCAAoC;AACvD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,WAAW,GAAG,SAAS;AAClD;;AAEA,uBAAuB;AACvB,qCAAqC;;AAErC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,0B;;;;;;;;;;;AC3GA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;AAKA,mC;;;;;;;;;;;ACpDA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;AAKA,sC;;;;;;;;;;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uB;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./lib/GEOWars.js\");\n","const Game = require(\"./game\");\nconst GameView = require(\"./game_view\");\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const canvasEl = document.getElementsByTagName(\"canvas\")[0];\n  canvasEl.width = Game.DIM_X;\n  canvasEl.height = Game.DIM_Y;\n\n  const ctx = canvasEl.getContext(\"2d\");\n  const game = new Game();\n  new GameView(game, ctx, canvasEl).start();\n});\n\n","const Bullet = require(\"./game_objects/bullet\");\nconst Ship = require(\"./game_objects/ship\");\nconst Util = require(\"./util\");\nconst Particle = require(\"./particles/particle\");\nconst EnemySpawn = require(\"./particles/enemy_spawn\");\nconst ParticleExplosion = require(\"./particles/particle_explosion\");\nconst BulletWallExplosion = require(\"./particles/bullet_wall_explosion\");\nconst SingularityExplosion = require(\"./particles/singularity_explosion\");\nconst BoxBox = require(\"./game_objects/enemies/boxbox\");\nconst Pinwheel = require(\"./game_objects/enemies/pinwheel\");\nconst Arrow = require(\"./game_objects/enemies/arrow\");\nconst Grunt = require(\"./game_objects/enemies/grunt\");\nconst Weaver = require(\"./game_objects/enemies/weaver\");\nconst Singularity = require(\"./game_objects/enemies/singularity\");\nconst Sound = require(\"./sound\")\n\nclass Game {\n  constructor() {\n    this.enemies = [];\n    this.bullets = [];\n    this.ships = [];\n    this.particleExplosions = [];\n    this.spawningEnemies = [];\n    this.singularities = [];\n    this.muted = true;\n    // this.addEnemies();\n    this.gameTime = 0;\n    this.spawned = false; // REFACTOR PLEASE\n    this.enemyCreatorList = this.createEnemyCreatorList()\n    this.deathSound = new Audio(\"GEOWars/sounds/Enemy_explode.wav\")\n    this.deathSound.volume = 0.5;\n    this.bulletWallhit = new Audio(\"GEOWars/sounds/bullet_hitwall.wav\")\n    this.bulletWallhit.volume = 0.5;\n\n    this.intervalTiming = 1;\n    this.intervalTime = 0;\n    this.hugeSequenceTime = 0;\n    this.sequenceCount = 0;\n    this.lives = 3;\n    this.addEnemies();\n    this.soundsToPlay = {}\n  }\n\n  \n\n  randomArrowDirection () {\n    let angles = [0, Math.PI / 2, Math.PI, Math.PI * 3/2]\n    return angles[Math.floor(Math.random() * angles.length) % angles.length]\n  }\n  createEnemyCreatorList() {\n    return {\n      BoxBox: (pos) => (new BoxBox({ game: this, pos: pos})),\n      Pinwheel: (pos) => (new Pinwheel({ game: this, pos: pos })),\n      Arrow: (pos, angle) => (new Arrow({game: this, pos: pos, angle: angle})),\n      Grunt: (pos) => (new Grunt({game: this, pos: pos})),\n      Weaver: (pos) => (new Weaver({game: this, pos: pos})),\n      Singularity: (pos) => (new Singularity({game: this, pos: pos}))\n    };\n    \n  }\n\n  add(object) {\n    if (this.enemies.length < 50 || object instanceof Bullet || !(object instanceof EnemySpawn)){\n      if (object instanceof BoxBox || object instanceof Pinwheel || object instanceof Arrow || object instanceof Grunt || object instanceof Weaver) {\n        this.enemies.push(object)\n      } else if (object instanceof Singularity) {\n        this.singularities.push(object)\n      } else if (object instanceof Bullet) {\n        this.bullets.push(object);\n      } else if (object instanceof Ship) {\n        this.ships.push(object);\n      } else if (object instanceof ParticleExplosion || object instanceof BulletWallExplosion || object instanceof SingularityExplosion) {\n        this.particleExplosions.push(object);\n      } else if (object instanceof EnemySpawn) {\n        this.spawningEnemies.push(object);\n      } else {\n        throw new Error(\"unknown type of object\");\n      }\n    }\n    \n  }\n\n  addEnemies() {\n    for (let i = 0; i < Game.NUM_BOXES; i++) {\n      this.add(new BoxBox({ game: this}));\n    }\n    for (let i = 0; i < Game.NUM_PINWHEELS; i++) {\n      this.add(new Pinwheel({game: this}));\n    }\n    for (let i = 0; i < Game.NUM_ARROWS; i++) {\n      this.add(new Arrow({ game: this }));\n    }\n    for (let i = 0; i < Game.NUM_GRUNTS; i++) {\n      this.add(new Grunt({ game: this }));\n    }\n    for (let i = 0; i < Game.NUM_WEAVERS; i++) {\n      this.add(new Weaver({ game: this }));\n    }\n    for (let i = 0; i < Game.NUM_SINGULARITIES; i++) {\n      this.add(new Singularity({ game: this, id: this.singularities.length, pos: [500,500] }));\n    }\n  }\n\n  randomSpawnEnemy(enemy){\n    if (this.enemies.length < 50) {\n      let pos = this.randomPosition();\n      let enemyCreators = Object.values(this.enemyCreatorList)\n      let spawn = new EnemySpawn(enemyCreators[Math.floor(Math.random() * enemyCreators.length) % enemyCreators.length](), this);\n      this.add(spawn)\n    }\n  }\n  \n\n  spawnEnemies(spawnList) {\n    if (this.enemies.length < 50 ) {\n      spawnList.forEach((enemy) => {\n        let spawn = new EnemySpawn(enemy, this)\n        this.add(spawn)\n      })\n    }\n  }\n\n  spawnSequence(delta) {\n    this.intervalTime += delta;\n    // this.gameTime += delta;\n    if (this.intervalTime > (500 * this.intervalTiming) && this.sequenceCount < 10) {\n      this.intervalTime = 0;\n      this.randomSpawnEnemy();\n      this.sequenceCount += 1\n    } else if (this.intervalTime > (2500 * this.intervalTiming) && this.sequenceCount === 10 && this.hugeSequenceTime % 2 === 0) {\n      this.intervalTime = 0\n      this.sequenceCount +=1\n      let enemies_to_spawn = []\n      let randomPos = this.randomPosition();\n      for (let i = 0; i < 2; i++) {\n        for (let j = 0; j < 2; j++) {\n          enemies_to_spawn.push(\n            this.enemyCreatorList[\"BoxBox\"]([i * 40 + randomPos[0], j * 40 + randomPos[1]])\n          )\n        }\n      }\n      this.spawnEnemies(enemies_to_spawn);\n\n    } else if (this.intervalTime > (2500 * this.intervalTiming) && this.sequenceCount === 10 && this.hugeSequenceTime % 2 === 1) {\n      this.intervalTime = 0\n      this.sequenceCount += 1\n      let enemies_to_spawn = []\n      let randomPos = this.randomPosition();\n      for (let i = 0; i < 2; i++) {\n        for (let j = 0; j < 2; j++) {\n          enemies_to_spawn.push(\n            this.enemyCreatorList[\"Weaver\"]([i * 40 + randomPos[0], j * 40 + randomPos[1]])\n          )\n        }\n      }\n      this.spawnEnemies(enemies_to_spawn);\n    } else if (this.intervalTime > (5000 * this.intervalTiming) && this.sequenceCount === 11) {\n      this.intervalTime = 0;\n      this.sequenceCount += 1;\n    } else if (this.intervalTime > 250 && this.sequenceCount < (11 + 15) && (this.sequenceCount > 11) && this.hugeSequenceTime % 2 === 0) {\n      this.intervalTime = 0;\n      this.sequenceCount += 1 ;\n\n      let enemies_to_spawn = [];\n      let fourCorners = [\n        [40,              40],\n        [Game.DIM_X - 40, 40],\n        [40, Game.DIM_Y - 40],\n        [Game.DIM_X - 40, Game.DIM_Y - 40]\n      ]\n      fourCorners.forEach((corner) => {\n        enemies_to_spawn.push(this.enemyCreatorList[\"Grunt\"]( corner))\n      })\n      this.spawnEnemies(enemies_to_spawn);\n    } else if (this.intervalTime > 250 && this.sequenceCount < (11 + 15) && (this.sequenceCount > 11) && this.hugeSequenceTime % 2 === 1) {\n      this.intervalTime = 0;\n      this.sequenceCount += 14;\n\n      let enemies_to_spawn = [];\n      let arrowWallPositions = []\n      let arrowDirection = Math.PI * 3 / 2 + Math.PI\n      for (let i = 40; i < Game.DIM_X; i += 40) {\n        arrowWallPositions.push([i,50])\n      }\n  \n      arrowWallPositions.forEach((position) => {\n        enemies_to_spawn.push(this.enemyCreatorList[\"Arrow\"](position, arrowDirection))\n      })\n\n      this.spawnEnemies(enemies_to_spawn);\n    } else if( this.sequenceCount >= 26) {\n      this.sequenceCount = 0;\n      if (!(this.intervalTiming < 0.5)){\n        this.intervalTiming *= 0.9;\n      }\n      this.hugeSequenceTime += 1;\n    }\n    // if (this.gameTime % 2000 === 0){\n    //   this.spawned = false\n    // }\n    // if( !this.spawned){\n    //   this.spawnEnemy()\n    //   this.spawned = true\n    // }\n  }\n\n  addShip() {\n    const ship = new Ship({\n      pos: this.randomPosition(),\n      game: this\n    });\n\n    this.add(ship);\n\n    return ship;\n  }\n\n  allObjects() {\n    return [].concat(this.enemies, this.singularities); //this.singularities);\n  }\n\n  //explosions\n  particleObjects() {\n    return [].concat(this.particleExplosions, this.spawningEnemies);\n  }\n\n  allObjects2() {\n    return [].concat(this.bullets, this.singularities, this.ships)\n  }\n\n  checkCollisions(ctx) {\n    const bullets = this.bullets;\n    const allObjects = this.allObjects();\n    const allObjects2 = this.allObjects2();\n    for (let i = 0; i < allObjects.length; i++) {\n      for (let j = 0; j < allObjects2.length; j++) {\n        const obj1 = allObjects[i];\n        const obj2 = allObjects2[j];\n        // if (obj1 instanceof Singularity && obj2 instanceof Singularity){\n        //   if (obj1.id === obj2.id){\n        //     continue;\n        //   }\n        // }\n        if (obj2 instanceof Singularity) {\n          obj2.isCollidedWith(obj1)\n          continue\n        }\n        if (obj1.isCollidedWith(obj2)) {\n          const explosionId = this.particleExplosions.length\n\n          if (!this.muted) {\n            let death = new Sound(\"GEOWars/sounds/Enemy_explode.wav\", 0.4)\n            this.soundsToPlay[death.url] = death\n          }\n          if (obj1 instanceof Singularity){\n            this.add(new SingularityExplosion(obj1.pos[0], obj1.pos[1], ctx, this, explosionId))\n            const collision = obj1.collideWith(obj2);\n          } else {\n            this.add(new ParticleExplosion(obj1.pos[0], obj1.pos[1], ctx, this, explosionId))\n            const collision = obj1.collideWith(obj2);\n          }\n          // if (collision) return;\n        }\n      }\n    }\n  }\n\n  die(){\n    this.intervalTiming = this.intervalTiming;\n    this.intervalTime = 0;\n    this.hugeSequenceTime = 0;\n    this.sequenceCount = 0;\n    this.lives -= 1;\n    this.enemies = [];\n    if (this.lives === 0){\n      this.intervalTiming = 1;\n      this.lives = 3;\n      location.reload();\n    }\n  }\n\n\n  draw(ctx) {\n\n    // var ctx = document.createElement(\"canvas\").getContext(\"2d\");\n    // ctx.canvas.width = this.DIM_X;\n    // ctx.canvas.height = this.DIM_Y;\n\n    ctx.save()\n    ctx.clearRect(0, 0, Game.DIM_X, Game.DIM_Y);\n    ctx.fillStyle = Game.BG_COLOR;\n    ctx.fillRect(0, 0, Game.DIM_X, Game.DIM_Y);\n\n    this.ships.forEach((object) => {\n      object.draw(ctx);\n    })\n    this.allObjects().forEach((object) => {\n      object.draw(ctx);\n    });\n    this.bullets.forEach((object) => {\n      object.draw(ctx)\n    });\n    this.particleObjects().forEach((particle) => {\n      particle.draw(ctx);\n    });\n    this.singularities.forEach((object) => {\n      object.draw(ctx);\n    });\n  }\n  \n\n  playSounds() {\n    Object.values(this.soundsToPlay).forEach((sound) => {\n      sound.play();\n    })\n    this.soundsToPlay = {};\n  }\n\n\n  isOutOfBounds(pos) {\n    return (pos[0] < 0) || (pos[1] < 0) ||\n      (pos[0] > Game.DIM_X) || (pos[1] > Game.DIM_Y);\n  }\n\n  moveObjects(delta) {\n    this.allObjects().forEach((object) => {\n      object.move(delta);\n    });\n    this.bullets.forEach((object) => {\n      object.move(delta);\n    });\n    this.ships.forEach((object) => {\n      object.move(delta);\n    });\n    this.particleObjects().forEach((object) => {\n      object.move(delta)\n    });\n  }\n\n  randomPosition() {\n    return [\n      Game.DIM_X * Math.random(),\n      Game.DIM_Y * Math.random(),\n      // 500,300\n    ];\n  }\n\n  remove(object) {\n    // object.pos = [-1000,-1000];\n    if (object instanceof Bullet) {\n      this.bullets.splice(this.bullets.indexOf(object), 1);\n    } else if (object instanceof Ship) {\n      this.ships.splice(this.ships.indexOf(object), 1);\n    } else if (object instanceof ParticleExplosion || object instanceof BulletWallExplosion || object instanceof SingularityExplosion) {\n      this.particleObjects.splice(this.particleObjects.indexOf(object), 1);\n    } else if (object instanceof Particle){\n      object.active = false\n    } else if (object instanceof BoxBox) {\n      this.enemies.splice(this.enemies.indexOf(object), 1);\n    } else if (object instanceof Pinwheel) {\n      this.enemies.splice(this.enemies.indexOf(object),1);\n    } else if (object instanceof Arrow) {\n      this.enemies.splice(this.enemies.indexOf(object), 1);\n    } else if (object instanceof Grunt) {\n      this.enemies.splice(this.enemies.indexOf(object), 1);\n    } else if (object instanceof Weaver) {\n      this.enemies.splice(this.enemies.indexOf(object), 1);\n    } else if (object instanceof Singularity) {\n      this.singularities.splice(this.singularities.indexOf(object), 1)\n    } else if (object instanceof EnemySpawn) {\n      this.spawningEnemies.splice(this.spawningEnemies.indexOf(object), 1)\n    }\n    else {\n      throw new Error(\"unknown type of object\");\n    }\n  }\n  \n\n  updateShipFireAngle(){\n    this.ships[0].setFireAngle()\n  }\n\n \n\n  // spawning handled here. checks the delta time, \n  // adds units when appropriate\n  step(delta, ctx) {\n    this.ctx = ctx\n    this.spawnSequence(delta);\n    this.checkCollisions(ctx);\n    this.moveObjects(delta);\n    this.updateShipFireAngle();\n    this.playSounds();\n  }\n\n  wrap(pos) {\n    return [\n      Util.wrap(pos[0], Game.DIM_X), Util.wrap(pos[1], Game.DIM_Y)\n    ];\n  }\n}\n\nGame.BG_COLOR = \"#000000\";\n\nGame.DIM_X = 1000;\nGame.DIM_Y = 600;\n// Game.FPS = 32;\nGame.NUM_BOXES = 0;\nGame.NUM_PINWHEELS = 0;\nGame.NUM_ARROWS = 0;\nGame.NUM_GRUNTS = 0;\nGame.NUM_WEAVERS = 0;\nGame.NUM_SINGULARITIES = 1;\nmodule.exports = Game;\n\nGame.Spawn1 = {\n  BoxBox: 50,\n}\n  \nGame.spawnListList = [\n  Game.Spawn1\n]","const Util = require(\"./util\");\nconst Sound = require(\"./sound\")\nconst BulletWallExplosion = require(\"./particles/bullet_wall_explosion\")\nclass GameObject {\n  constructor(options) {\n    this.pos = options.pos;\n    this.vel = options.vel;\n    this.radius = options.radius || 5;\n    this.color = options.color;\n    this.game = options.game;\n    this.bounce = true;\n  }\n  \n  collideWith(otherObject) {\n    // default do nothing\n  }\n\n  draw(ctx) {\n    ctx.fillStyle = this.color;\n    // ctx.fillStyle = \"#98f517\";\n    // ctx.fillRect(this.pos[0], this.pos[1], 10, 10);\n    ctx.beginPath();\n    ctx.arc(\n      this.pos[0], this.pos[1], this.radius, 0, 2 * Math.PI, true\n    );\n    ctx.fill();\n  }\n  \n  isCollidedWith(otherObject) {\n    const centerDist = Util.dist(this.pos, otherObject.pos);\n    return centerDist < (this.radius + otherObject.radius);\n  }\n\n  move(timeDelta) {\n    // timeDelta is number of milliseconds since last move\n    // if the computer is busy the time delta will be larger\n    // in this case the PhysicsObject should move farther in this frame\n    // velocity of object is how far it should move in 1/60th of a second or something\n    const velocityScale = timeDelta / NORMAL_FRAME_TIME_DELTA,\n    offsetX = this.vel[0] * velocityScale,\n    offsetY = this.vel[1] * velocityScale;\n    this.pos = [this.pos[0] + offsetX, this.pos[1] + offsetY];\n\n    \n\n    if (this.game.isOutOfBounds(this.pos)) {\n      if (this.bounce) {\n        this.pos = this.game.wrap(this.pos);\n      } else {\n\n        this.game.add(new BulletWallExplosion(this.pos[0], this.pos[1], this.game.ctx, this.game))\n        if (!this.game.muted) {\n          let wallhit = new Sound(\"GEOWars/sounds/bullet_hitwall.wav\", 1)\n          this.game.soundsToPlay[wallhit.url] = wallhit\n        } \n        this.remove();\n      }\n    }\n  }\n\n  remove() {\n\n\n    this.game.remove(this);\n\n\n  }\n}\n\nconst NORMAL_FRAME_TIME_DELTA = 1000 / 60;\n\nmodule.exports = GameObject;\n","const GameObject = require(\"../game_object\");\nconst Sound = require(\"../sound\")\n\nclass Bullet extends GameObject {\n  constructor(options) {\n    super(options);\n    this.bounce = false;\n    this.color = \"#FFFBCE\";\n    this.acc = [0,0];\n    this.vel = options.vel\n    this.speed = 8.5;\n    this.length = 12;\n    options.radius = this.length / 4;\n  }\n\n  // move(timeDelta) {\n  //   if (this.game.isOutOfBounds(this.pos)) {\n  //     this.game.add(new BulletWallExplosion(this.pos[0], this.pos[1], this.game.ctx, this.game))\n  //     if (!this.game.muted) {\n  //       let wallhit = new Audio(\"GEOWars/sounds/bullet_hitwall.wav\")\n  //       \n  //     }\n  //     this.remove();\n  //   }\n\n  draw(ctx) {\n    let l = this.length\n    let pos = this.pos;\n    let w = this.length/2;\n    let movementDirection = Math.atan2(this.vel[0], -this.vel[1])\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.translate(pos[0], pos[1]);\n    ctx.rotate(movementDirection + 2 * Math.PI);\n\n    ctx.beginPath();\n    ctx.strokeStyle = \"#FBFBC2\";\n    ctx.lineWidth = 1;\n\n    ctx.moveTo(-l / 4, l / 2); //1\n    ctx.lineTo(0, -l / 2); //2\n    ctx.lineTo(l / 4, l / 2); //3\n\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n\n  }\n    \n}\n\n\nBullet.RADIUS = 3;\nBullet.SPEED = 7;\n\nmodule.exports = Bullet;\n\nconst NORMAL_FRAME_TIME_DELTA = 1000 / 60;","const GameObject = require(\"../../game_object\")\nconst Bullet = require(\"../bullet\")\nconst Ship = require(\"../ship\")\nconst Util = require(\"../../util\");\nconst Singularity = require(\"./singularity\")\nconst Sound = require(\"../../sound\")\n\nclass Arrow extends GameObject {\n  constructor(options) {\n    super(options)\n    this.pos = options.pos || options.game.randomPosition();\n    this.angle = options.angle || Math.PI / 3;\n    this.spawnSound = new Sound(\"GEOWars/sounds/Enemy_spawn_purple.wav\", 0.5);\n    this.speed = 3;\n    this.vel = Util.vectorCartisian(this.angle, this.speed);\n    this.acc = [0,0];\n  }\n\n  move(timeDelta) {\n    let rotationSpeedScale = timeDelta / NORMAL_FRAME_TIME_DELTA;\n    let velocityScale = timeDelta / NORMAL_FRAME_TIME_DELTA;\n    this.pos[0] += this.vel[0] * velocityScale + this.acc[0] * (velocityScale * velocityScale) / 2\n    this.pos[1] += this.vel[1] * velocityScale + this.acc[1] * (velocityScale * velocityScale) / 2\n    this.vel[0] += this.acc[0] * velocityScale;\n    this.vel[1] += this.acc[1] * velocityScale;\n    \n    if (this.game.isOutOfBounds(this.pos)) {\n      Util.redirect(this,[1000, 600]) // HARD CODED\n    }\n    this.acc = [0, 0];\n  }\n\n  \n\n  draw(ctx, spawningScale) {\n    \n    let pos = this.pos;\n    spawningScale = spawningScale || 1;\n    let shipLength = 8 * 2.2 * spawningScale;\n    let shipWidth = 6 * 2.2 * spawningScale;\n    let l = shipLength;\n    let w = shipWidth;\n    let movementDirection = Math.atan2(this.vel[0], -this.vel[1])\n\n    // let r = 255;\n    // let g = 255;\n    // let b = 13;\n    let r = 255;\n    let g = 255;\n    let b = 50;\n\n\n\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.translate(pos[0], pos[1]);\n    ctx.rotate(movementDirection + 2 * Math.PI );\n\n    \n    // ctx.strokeStyle = \"#f2ff00\"; // look up rgb and put here\n    ctx.lineWidth = 2;\n\n    let blurFactor = 0.5\n    ctx.shadowColor = \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n    ctx.shadowBlur = 10 * blurFactor ;\n    ctx.strokeStyle = \"rgba(\" + r + \",\" + g + \",\" + b + \",0.2)\";\n    ctx.lineWidth = 7.5 * blurFactor;\n    this.drawArrow(ctx, l, w);\n    ctx.lineWidth = 6 * blurFactor;\n    this.drawArrow(ctx, l, w);\n    ctx.lineWidth = 4.5;\n    this.drawArrow(ctx, l, w);\n    ctx.lineWidth = 3;\n    this.drawArrow(ctx, l, w);\n    ctx.strokeStyle = 'rgb(255, 255, 255)';\n    ctx.lineWidth = 1.5;\n    this.drawArrow(ctx, l, w);\n    \n    // drawArraw(ctx)\n   \n\n    \n    ctx.restore();\n  }\n\n  drawArrow(ctx, l, w) {\n    ctx.beginPath();\n    ctx.moveTo(0, -l / 2); //1\n    ctx.lineTo(w / 2, l / 4); //2\n    ctx.lineTo(w / 6, l / 2); //3\n    ctx.lineTo(0, l / 4); //4\n    ctx.lineTo(-w / 6, l / 2); //5\n    ctx.lineTo(-w / 2, l / 4); //6\n    ctx.closePath();\n    ctx.stroke();\n  }\n\n  collideWith(otherObject) {\n    if (otherObject instanceof Ship) {\n\n      otherObject.relocate();\n      return true;\n    } else if (otherObject instanceof Bullet || otherObject instanceof Singularity) {\n      \n      this.remove();\n      otherObject.remove();\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\n\n\nconst NORMAL_FRAME_TIME_DELTA = 1000 / 60;\nmodule.exports = Arrow;","const GameObject = require(\"../../game_object\")\nconst Bullet = require(\"../bullet\")\nconst Ship = require(\"../ship\")\nconst Singularity = require(\"./singularity\")\nconst Sound = require(\"../../sound\")\nconst Util = require(\"../../util\")\nclass BoxBox extends GameObject {\n  constructor(options) {\n    super(options)\n    this.pos = options.pos || options.game.randomPosition();\n    this.vel = [0,0]\n    this.acc = [0,0];\n    this.spawnSound = new Sound(\"GEOWars/sounds/Enemy_spawn_blue.wav\", 0.5);\n  }\n\n  move(timeDelta) {\n    // let speed = 1.5;\n   \n    \n    const timeScale = timeDelta / NORMAL_FRAME_TIME_DELTA;\n    this.pos[0] += this.vel[0] * timeScale + this.acc[0] * (timeScale * timeScale) / 2;\n    this.pos[1] += this.vel[1] * timeScale + this.acc[1] * (timeScale * timeScale) / 2;\n    this.vel[0] += this.acc[0] * timeScale;\n    this.vel[1] += this.acc[1] * timeScale;\n\n    if (this.game.isOutOfBounds(this.pos)) {\n      Util.bounce(this, [1000, 600]) // HARD CODED\n    }\n  }\n\n  draw(ctx, spawningScale) {\n    this.acc = [0, 0];\n    spawningScale = spawningScale || 1;\n    let pos = this.pos\n    let boxsize = 10 * spawningScale;\n\n    \n    // ctx.strokeStyle = \"#F173BA\";\n\n    let r = 230;\n    let g = 30;\n    let b = 30;\n    \n    let blurFactor = 0.5\n    ctx.save();\n    ctx.shadowColor = \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n    ctx.shadowBlur = 10\n    ctx.strokeStyle = \"rgba(\" + r + \",\" + g + \",\" + b + \",0.2)\";\n    ctx.restore();\n    ctx.lineWidth = 2;\n\n    // drawRect()\n\n    // ctx.rect(pos[0] - (6 / 8 * boxsize), pos[1] - (2 / 8 * boxsize), boxsize, boxsize);\n    // ctx.rect(pos[0] - (2 / 8 * boxsize), pos[1] - (6 / 8 * boxsize), boxsize, boxsize);\n    // ctx.stroke();\n    // ctx.lineWidth = 6 // * blurFactor;\n    // ctx.rect(pos[0] - (6 / 8 * boxsize), pos[1] - (2 / 8 * boxsize), boxsize, boxsize);\n    // ctx.rect(pos[0] - (2 / 8 * boxsize), pos[1] - (6 / 8 * boxsize), boxsize, boxsize);\n    // ctx.stroke();\n    // ctx.lineWidth = 4.5 // * blurFactor;\n    // ctx.rect(pos[0] - (6 / 8 * boxsize), pos[1] - (2 / 8 * boxsize), boxsize, boxsize);\n    // ctx.rect(pos[0] - (2 / 8 * boxsize), pos[1] - (6 / 8 * boxsize), boxsize, boxsize);\n    // ctx.stroke();\n    // ctx.lineWidth = 3 // * blurFactor;\n    // ctx.rect(pos[0] - (6 / 8 * boxsize), pos[1] - (2 / 8 * boxsize), boxsize, boxsize);\n    // ctx.rect(pos[0] - (2 / 8 * boxsize), pos[1] - (6 / 8 * boxsize), boxsize, boxsize);\n    // ctx.stroke();\n    // ctx.strokeStyle = 'rgb(255, 255, 255)';\n    // ctx.lineWidth = 1.5 // * blurFactor;\n    // ctx.rect(pos[0] - (6 / 8 * boxsize), pos[1] - (2 / 8 * boxsize), boxsize, boxsize);\n    // ctx.rect(pos[0] - (2 / 8 * boxsize), pos[1] - (6 / 8 * boxsize), boxsize, boxsize);\n    // ctx.stroke();\n\n    ctx.restore();\n  }\n\n  drawRect(ctx, boxsize) {\n\n  }\n\n  collideWith(otherObject) {\n    if (otherObject instanceof Ship) {\n      otherObject.relocate();\n      return true;\n    } else if (otherObject instanceof Bullet || otherObject instanceof Singularity) {\n      \n      this.remove();\n      otherObject.remove();\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nBoxBox.BOX_SIZE = 10;\nBoxBox.COLOR = \"#f00745\"\n\nmodule.exports = BoxBox;\n\nconst NORMAL_FRAME_TIME_DELTA = 1000 / 60;","const GameObject = require(\"../../game_object\")\nconst Bullet = require(\"../bullet\")\nconst Ship = require(\"../ship\")\nconst Singularity = require(\"./singularity\")\nconst Sound = require(\"../../sound\")\nconst Util = require(\"../../util\")\nclass Grunt extends GameObject {\n  constructor(options) {\n    super(options)\n    this.pos = options.pos || options.game.randomPosition();\n    this.stretchScale_W = 1;\n    this.stretchScale_L = 1;\n    this.stretchDirection = -1;\n    this.vel = [0,0];\n    this.acc = [0,0];\n\n    this.spawnSound = new Sound(\"GEOWars/sounds/Enemy_spawn_blue.wav\", 0.5);\n  }\n\n\n  // ADDING MOVEMENT MECHANICS FOR GRUNT\n  move(timeDelta) {\n    let speed = 1.5;\n    let shipPos = this.game.ships[0].pos;\n    let dy = shipPos[1] - this.pos[1];\n    let dx = shipPos[0] - this.pos[0];\n    \n    const velocityScale = timeDelta / NORMAL_FRAME_TIME_DELTA;\n    let direction = Math.atan2(dy, dx);\n\n    // I need to make a max speed and the pulling effect an acceleration instead\n    // this will make it possible to direct the ship well too\n    \n    // if (this.game.isOutOfBounds(this.pos)) {\n    //   Util.bounce(this, [1000, 600]) // HARD CODED\n    // }\n    \n    this.pos[0] += (this.vel[0] + speed * Math.cos(direction)) * velocityScale + this.acc[0] * (velocityScale * velocityScale) / 2;\n    this.pos[1] += (this.vel[1] + speed * Math.sin(direction)) * velocityScale + this.acc[1] * (velocityScale * velocityScale) / 2;\n    this.vel[0] += this.acc[0] * velocityScale;\n    this.vel[1] += this.acc[1] * velocityScale;\n    \n    \n    let cycleSpeedScale = timeDelta / NORMAL_FRAME_TIME_DELTA;\n    let cycleSpeed = 0.01;\n    \n\n    if (this.stretchScale_W < 0.7 || this.stretchScale_W > 1) {\n      this.stretchDirection *= -1\n    } \n      \n    this.stretchScale_W = this.stretchScale_W +  -this.stretchDirection * cycleSpeed * cycleSpeedScale;\n    this.stretchScale_L = this.stretchScale_L + this.stretchDirection * cycleSpeed * cycleSpeedScale;\n\n    if (this.game.isOutOfBounds(this.pos)) {\n      Util.bounce(this, [1000, 600]) // HARD CODED\n    }\n     \n  }\n\n  draw(ctx, spawningScale) {\n    this.acc = [0,0];\n    let pos = this.pos;\n    spawningScale = spawningScale || 1;\n    let shipLength = 10 * 2.2 * spawningScale * this.stretchScale_L;\n    let shipWidth = 10 * 2.2 * spawningScale * this.stretchScale_W;\n    let l = shipLength;\n    let w = shipWidth;\n\n    // let r = 13;\n    // let g = 213;\n    // let b = 255;\n    let r = 0;\n    let g = 57;\n    let b = 230;\n\n    ctx.save();\n    ctx.translate(pos[0], pos[1]);\n\n    // ctx.strokeStyle = \"#4286f4\";\n    // ctx.lineWidth = 4;\n    let blurFactor = 0.5\n    \n    ctx.shadowColor = \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n    ctx.shadowBlur = 10\n    ctx.strokeStyle = \"rgba(\" + r + \",\" + g + \",\" + b + \",0.2)\";\n    ctx.lineWidth = 7.5 * blurFactor;\n    this.drawDiamond(ctx, l, w);\n    ctx.lineWidth = 6// * blurFactor;\n    this.drawDiamond(ctx, l, w);\n    ctx.lineWidth = 4.5// * blurFactor;\n    this.drawDiamond(ctx, l, w);\n    ctx.lineWidth = 3// * blurFactor;\n    this.drawDiamond(ctx, l, w);\n    ctx.strokeStyle = 'rgb(255, 255, 255)';\n    ctx.lineWidth = 1.5// * blurFactor;\n    this.drawDiamond(ctx, l, w);\n\n\n\n    \n    ctx.restore();\n  }\n\n  drawDiamond(ctx, l, w){\n    ctx.beginPath();\n    ctx.moveTo(0, -l / 2); //1\n    ctx.lineTo(w / 2, 0); //2\n    ctx.lineTo(0, l / 2); //3\n    ctx.lineTo(-w / 2, -0); //4\n    ctx.closePath();\n    ctx.stroke();\n  }\n\n  collideWith(otherObject) {\n    if (otherObject instanceof Ship) {\n      otherObject.relocate();\n      return true;\n    } else if (otherObject instanceof Bullet || otherObject instanceof Singularity) {\n      this.remove();\n      \n      otherObject.remove();\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nGrunt.BOX_SIZE = 10;\nGrunt.COLOR = \"#4286f4\"\n\nmodule.exports = Grunt;\n\nconst NORMAL_FRAME_TIME_DELTA = 1000 / 60;","const GameObject = require(\"../../game_object\")\nconst Bullet = require(\"../bullet\")\nconst Ship = require(\"../ship\")\nconst Util = require(\"../../util\");\nconst Singularity = require(\"./singularity\")\nconst Sound = require(\"../../sound\")\nclass Pinwheel extends GameObject {\n  constructor(options) {\n    super(options)\n    this.pos = options.pos || options.game.randomPosition();\n    this.angle = 0;\n    this.rotation_speed = 0.05;\n    this.speed = 1;\n    this.vel = Util.randomVec(this.speed);\n    this.acc = [0,0];\n    this.spawnSound = new Sound(\"GEOWars/sounds/Enemy_spawn_blue.wav\", 0.5);\n  }\n\n  move(timeDelta) {\n    let rotationSpeedScale = timeDelta / NORMAL_FRAME_TIME_DELTA;\n    let velocityScale = timeDelta / NORMAL_FRAME_TIME_DELTA;\n    \n    this.angle = (this.angle + this.rotation_speed * rotationSpeedScale) % (Math.PI * 2)\n\n    this.pos[0] += this.vel[0] * velocityScale + this.acc[0] * (velocityScale * velocityScale) / 2\n    this.pos[1] += this.vel[1] * velocityScale + this.acc[1] * (velocityScale * velocityScale) / 2\n    this.vel[0] += this.acc[0] * velocityScale;\n    this.vel[1] += this.acc[1] * velocityScale;\n\n\n    if (this.game.isOutOfBounds(this.pos)) {\n      Util.bounce(this, [1000, 600]) // HARD CODED\n    }\n  }\n\n  draw(ctx, spawningScale) {\n    this.acc = [0, 0];\n    spawningScale = spawningScale || 1\n    let pos = this.pos\n    let shipWidth = 12 * spawningScale\n    let s = shipWidth/2\n    \n    let r = 59;\n    let g = 10;\n    let b = 87;\n\n    ctx.save();\n    ctx.translate(pos[0], pos[1]);\n    ctx.rotate(this.angle);\n\n    let blurFactor = 0.5\n    ctx.shadowColor = \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n    ctx.shadowBlur = 10 * blurFactor * blurFactor\n    ctx.strokeStyle = \"rgba(\" + r + \",\" + g + \",\" + b + \",0.2)\";\n    ctx.lineWidth = 7.5 * blurFactor * blurFactor\n    ctx.strokeStyle = \"rgba(\" + r + \",\" + g + \",\" + b + \",0.2)\";\n    this.drawPinwheel(ctx, s)\n    ctx.lineWidth = 6 * blurFactor\n    ctx.strokeStyle = \"rgba(\" + r + \",\" + g + \",\" + b + \",0.6)\";\n    this.drawPinwheel(ctx, s)\n    ctx.lineWidth = 4.5;\n    this.drawPinwheel(ctx, s)\n    ctx.lineWidth = 3;\n    this.drawPinwheel(ctx, s)\n    ctx.strokeStyle = 'rgb(200, 100, 255)';\n    ctx.lineWidth = 1.5;\n    this.drawPinwheel(ctx, s)\n\n    // ctx.strokeStyle = \"#971adf\";\n    // ctx.lineWidth = 1.8;\n    \n    ctx.restore();\n  }\n\n  drawPinwheel(ctx, s){\n    ctx.beginPath();\n    ctx.moveTo(0, 0);\n    ctx.lineTo(0, 0); //1\n    ctx.lineTo(-s, -s); //2\n    ctx.lineTo(0, -s); //3\n    ctx.lineTo(0, 0); //1\n    ctx.lineTo(s, -s); //4\n    ctx.lineTo(s, 0); //5\n    ctx.lineTo(0, 0); //1\n    ctx.lineTo(s, s); //6\n    ctx.lineTo(0, s); //7\n    ctx.lineTo(0, 0); //1\n    ctx.lineTo(-s, s); //8\n    ctx.lineTo(-s, 0); //9\n    // ctx.lineTo(); //1\n\n    ctx.closePath();\n    ctx.stroke();\n  }\n\n  collideWith(otherObject) {\n    if (otherObject instanceof Ship) {\n      otherObject.relocate();\n      return true;\n    } else if (otherObject instanceof Bullet || otherObject instanceof Singularity) {\n      this.remove();\n      \n      otherObject.remove();\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\n\n\nconst NORMAL_FRAME_TIME_DELTA = 1000 / 60;\nmodule.exports = Pinwheel;","const GameObject = require(\"../../game_object\")\nconst Bullet = require(\"../bullet\")\nconst Ship = require(\"../ship\")\nconst Util = require(\"../../util\")\nconst Sound = require(\"../../sound\")\nclass Singularity extends GameObject {\n  constructor(options) {\n    super(options)\n    this.pos = options.pos || options.game.randomPosition();\n    this.vel = [0,0];\n    this.acc = [0,0];\n    this.radius = 15;\n    this.gravityWellSize = 10000000000;\n    this.gravityConstant = 1000;\n    this.id = options.id\n    this.spawnSound = new Sound(\"GEOWars/sounds/Enemy_spawn_red.wav\", 1);\n    this.throbbingScale = 1\n    this.increasing = true\n  }\n\n  throb(timeDelta) {\n    this.existTime += timeDelta;\n\n    let cycleSpeedScale = timeDelta / NORMAL_FRAME_TIME_DELTA;\n    let cycleSpeed = 0.025;\n    // increase scale until 1.2, decrease until 0.8\n\n    if (this.increasing) {\n      this.throbbingScale += cycleSpeed * cycleSpeedScale\n      if (this.throbbingScale > 1.2){\n        this.increasing = !this.increasing\n      }\n    } else {\n      this.throbbingScale -= cycleSpeed * cycleSpeedScale\n      if (this.throbbingScale < 0.8) {\n        this.increasing = !this.increasing\n      }\n    }\n  }\n\n  move(timeDelta) {\n    const velocityScale = timeDelta / NORMAL_FRAME_TIME_DELTA;\n    this.pos[0] += this.vel[0] * velocityScale + this.acc[0] * (velocityScale * velocityScale) / 2;\n    this.pos[1] += this.vel[1] * velocityScale + this.acc[1] * (velocityScale * velocityScale) / 2;\n    this.vel[0] += this.acc[0] * velocityScale;\n    this.vel[1] += this.acc[1] * velocityScale;\n\n    if (this.game.isOutOfBounds(this.pos)) {\n      Util.bounce(this, [1000, 600]) // HARD CODED\n    }\n\n    this.throb(timeDelta)\n  }\n\n  draw(ctx, spawningScale) {\n    this.acc = [0, 0];\n    if (!spawningScale) {\n      spawningScale = this.throbbingScale\n\n    }\n    \n    ctx.strokeStyle = \"#F173BA\"\n\n\n    let r = 95;\n    let g = 45;\n    let b = 73;\n\n    ctx.save();\n    // ctx.translate(pos[0], pos[1]);\n\n    // ctx.strokeStyle = \"#4286f4\";\n    // ctx.lineWidth = 4;\n    let blurFactor = 0.5\n\n    ctx.shadowColor = \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n    ctx.shadowBlur = 10\n    ctx.strokeStyle = \"rgba(\" + r + \",\" + g + \",\" + b + \",0.2)\";\n    ctx.lineWidth = 7.5;\n    this.drawSingularity(ctx, this.radius * spawningScale);\n    ctx.lineWidth = 6\n    this.drawSingularity(ctx, this.radius * spawningScale);\n    ctx.lineWidth = 4.5\n    this.drawSingularity(ctx, this.radius * spawningScale);\n    ctx.lineWidth = 3\n    this.drawSingularity(ctx, this.radius * spawningScale);\n    ctx.strokeStyle = 'rgb(255, 255, 255)';\n    ctx.lineWidth = 1.5\n    this.drawSingularity(ctx, this.radius * spawningScale);\n    ctx.restore();\n    // ctx.lineWidth = 2;\n    // drawSingularity(ctx, this.radius * spawningScale);\n  }\n\n  drawSingularity(ctx, radius) {\n    ctx.beginPath();\n    ctx.arc(this.pos[0], this.pos[1], radius, 0, 2 * Math.PI, true);\n    ctx.stroke();\n  }\n\n  influenceAcceleration(object) {\n    let dy = this.pos[1] - object.pos[1];\n    let dx = this.pos[0] - object.pos[0];\n    let unitVector = Util.dir([dx, dy]);\n    let r = Math.sqrt(dy * dy + dx * dx);\n    if (r > this.gravityWellSize * 7 / 8 || r < this.radius * 2){\n      object.acc = [0,0];\n    } else {\n      let newAcc = [\n        unitVector[0] * this.gravityConstant / (r * r),\n        unitVector[1] * this.gravityConstant / (r * r)\n      ]\n      object.acc = newAcc;\n    }\n  }\n\n  isCollidedWith(otherObject) {\n\n    const centerDist = Util.dist(this.pos, otherObject.pos);\n    \n    if (otherObject instanceof Bullet) {\n      if (centerDist < (this.radius + otherObject.radius)) {\n\n        return true\n\n      } else {\n        return false\n      }\n    }\n\n    if (otherObject instanceof Ship) {\n        return false\n    }\n\n    if (centerDist < (this.gravityWellSize + otherObject.radius)) {\n\n      this.influenceAcceleration(otherObject)\n      return false;\n    } else {\n\n      return false;\n    }\n    \n  }\n\n  collideWith(otherObject) {\n    if (otherObject instanceof Ship) {\n      otherObject.relocate();\n      return true;\n    } else if (otherObject instanceof Bullet) {\n      this.remove();\n      otherObject.remove();\n      return true;\n    }\n\n    return false;\n  }\n\n  remove() {\n\n    this.game.remove(this);\n  }\n}\n\nSingularity.BOX_SIZE = 10;\nSingularity.COLOR = \"#3cff0b\"\n\nmodule.exports = Singularity;\n\nconst NORMAL_FRAME_TIME_DELTA = 1000 / 60;","const GameObject = require(\"../../game_object\")\nconst Bullet = require(\"../bullet\")\nconst Ship = require(\"../ship\")\nconst Util = require(\"../../util\")\nconst Singularity = require(\"./singularity\")\nconst Sound = require(\"../../sound\")\nclass Weaver extends GameObject {\n  constructor(options) {\n    super(options)\n    this.pos = options.pos || options.game.randomPosition();\n    this.angle = 0;\n    this.rotation_speed = 0.075;\n    this.speed = 2;\n    this.initialDirection = Math.random() * 2 * Math.PI\n    this.initialVelocity = Util.vectorCartisian(this.initialDirection, 1)\n    this.vel = [0,0]\n    this.acc = [0,0];\n    this.weaverCloseHitBox = 35;\n    this.directionInfluenced = false;\n    this.influencers = [];\n    this.spawnSound = new Sound(\"GEOWars/sounds/Enemy_spawn_green.wav\", 0.5);\n  }\n\n\n  move(timeDelta) {\n    this.acc = [0, 0];\n    let speed = 2;\n    let shipPos = this.game.ships[0].pos;\n    let dy = shipPos[1] - this.pos[1];\n    let dx = shipPos[0] - this.pos[0];\n    \n    let rotationSpeedScale = timeDelta / NORMAL_FRAME_TIME_DELTA;\n    const velocityScale = timeDelta / NORMAL_FRAME_TIME_DELTA;\n    let direction = 0;\n    if (!this.directionInfluenced){\n      direction = Math.atan2(dy, dx);\n    } else {\n      direction = this.influenceDirection();\n    }\n    // I need to make a max speed and the pulling effect an acceleration instead\n    // this will make it possible to direct the ship well too\n    \n    // if (this.game.isOutOfBounds(this.pos)) {\n      //   Util.bounce(this, [1000, 600]) // HARD CODED\n      // }\n    \n    this.angle = (this.angle + this.rotation_speed * rotationSpeedScale) % (Math.PI * 2)\n    this.pos[0] += (this.vel[0] + speed * Math.cos(direction)) * velocityScale + this.acc[0] * (velocityScale * velocityScale) / 2;\n    this.pos[1] += (this.vel[1] + speed * Math.sin(direction)) * velocityScale + this.acc[1] * (velocityScale * velocityScale) / 2;\n    this.vel[0] += this.acc[0] * velocityScale;\n    this.vel[1] += this.acc[1] * velocityScale;\n\n    this.directionInfluenced = false;\n    this.influencers = [];\n\n    if (this.game.isOutOfBounds(this.pos)) {\n      Util.bounce(this, [1000, 600]) // HARD CODED\n    }\n  }\n\n  draw(ctx, spawningScale) {\n\n    let pos = this.pos;\n    spawningScale = spawningScale || 1;\n    let shipLength = 10 * 2.2 * spawningScale\n    let shipWidth = 10 * 2.2 * spawningScale\n    let s = shipWidth / 2;\n\n\n    let r = 24;\n    let g = 255;\n    let b = 4;\n\n    ctx.save();\n    ctx.translate(this.pos[0], this.pos[1]);\n    ctx.rotate(this.angle);\n\n    let blurFactor = 0.5\n    ctx.shadowColor = \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n    ctx.shadowBlur = 10 * blurFactor \n    ctx.strokeStyle = \"rgba(\" + r + \",\" + g + \",\" + b + \",0.2)\";\n    ctx.lineWidth = 7.5 \n    ctx.strokeStyle = \"rgba(\" + r + \",\" + g + \",\" + b + \",0.2)\";\n    this.drawWeaver(ctx, s)\n    ctx.lineWidth = 6 \n    ctx.strokeStyle = \"rgba(\" + r + \",\" + g + \",\" + b + \",0.6)\";\n    this.drawWeaver(ctx, s)\n    ctx.lineWidth = 4.5;\n    this.drawWeaver(ctx, s)\n    ctx.lineWidth = 3;\n    this.drawWeaver(ctx, s)\n    ctx.strokeStyle = 'rgb(255, 255, 255)';\n    ctx.lineWidth = 1.5;\n    this.drawWeaver(ctx, s)\n\n\n    ctx.restore();\n  }\n\n  drawWeaver(ctx, s){\n\n    ctx.beginPath();\n    // ctx.strokeStyle = \"#3cff0b\";\n    ctx.lineWidth = 2;\n    ctx.moveTo(0, -s); //1\n    ctx.lineTo(s, 0); //2\n    ctx.lineTo(0, s); //3\n    ctx.lineTo(-s, 0); //4\n    ctx.lineTo(0, -s); //1\n    ctx.lineTo(-s / 2, -s / 2); //5\n    ctx.lineTo(s / 2, -s / 2); //6\n    ctx.lineTo(s / 2, s / 2); //7\n    ctx.lineTo(-s / 2, s / 2); //8\n    ctx.lineTo(-s / 2, -s / 2); //5\n    // ctx.closePath();\n    ctx.stroke();\n  }\n\n  influenceDirection() {\n    let directionVector = [0,0]\n    \n    this.influencers.forEach((influencer) =>{\n      let dx = directionVector[0] + influencer[0];\n      let dy = directionVector[1] + influencer[1];\n      let newVector = [dx,dy]\n      directionVector = Util.dir(newVector);\n    })\n    let influencedDirection = Math.atan2(directionVector[1], directionVector[0]);\n    return influencedDirection\n  }\n\n  acceptBulletDirection(source){\n    this.directionInfluenced = true;\n    let dy = this.pos[1] - source[1];\n    let dx = this.pos[0] - source[0];\n    let unitVector = Util.dir([dx,dy]);\n    this.influencers.push(unitVector)\n    // first \n  }\n\n  isCollidedWith(otherObject) {\n    const centerDist = Util.dist(this.pos, otherObject.pos);\n\n    if (otherObject instanceof Bullet){\n      if (centerDist < (this.radius + otherObject.radius)) {\n\n        return true\n        \n      } else if( centerDist < (this.weaverCloseHitBox + otherObject.radius)) {\n        this.acceptBulletDirection(otherObject.pos) \n        return false;\n      } else {\n        return false;\n      }\n    }\n    return centerDist < (this.radius + otherObject.radius);\n  }\n\n  collideWith(otherObject) {\n    if (otherObject instanceof Ship) {\n      otherObject.relocate();\n      return true;\n    } else if (otherObject instanceof Bullet || otherObject instanceof Singularity) {\n      this.remove()\n      \n      otherObject.remove();\n      return true;\n    }\n\n    return false;\n  }\n}\n\nWeaver.BOX_SIZE = 10;\nWeaver.COLOR = \"#3cff0b\"\n\nmodule.exports = Weaver;\n\nconst NORMAL_FRAME_TIME_DELTA = 1000 / 60;","const GameObject = require(\"../game_object\");\nconst Bullet = require(\"./bullet\");\nconst Util = require(\"../util\");\n\nfunction randomColor() {\n  const hexDigits = \"0123456789ABCDEF\";\n\n  let color = \"#\";\n  for (let i = 0; i < 3; i++) {\n    color += hexDigits[Math.floor((Math.random() * 16))];\n  }\n\n\n  return color;\n}\n\nclass Ship extends GameObject {\n  constructor(options) {\n    options.radius = Ship.RADIUS;\n    options.vel = options.vel || [0, 0];\n    options.color = options.color || randomColor();\n    super(options);\n    this.speed = 2.5;\n    // this.vel = [0,0];\n    // this.acc = [0,0];\n    this.mousePos = [0,0];\n    this.fireAngle = 0; // might have to make it null\n  }\n\n  start(){\n    setInterval(\n      () => {\n        this.fireBullet()\n        if (! this.game.muted) {\n          let bulletSound = new Audio(\"GEOWars/sounds/Fire_normal.wav\");\n          bulletSound.volume = 0.2;\n          bulletSound.play()\n        }\n      },\n      1000 * 60 / (340 * 1.5)\n    )\n  }\n\n  draw(ctx) {\n    let pos = this.pos \n    let shipWidth = 10\n    let movementDirection = Math.atan2(this.vel[0], -this.vel[1])\n    ctx.save();\n    ctx.beginPath();\n    ctx.translate(pos[0], pos[1]);\n    ctx.rotate(movementDirection + 3/4 * Math.PI + Math.PI);\n    ctx.translate(-shipWidth / 2, shipWidth / 2);\n   \n    ctx.strokeStyle = \"#ffffff\";\n    let r = 255;\n    let g = 255;\n    let b = 255;\n\n    let blurFactor = 0.5\n    ctx.shadowColor = \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n    ctx.shadowBlur = 10 * blurFactor * blurFactor\n    ctx.strokeStyle = \"rgba(\" + r + \",\" + g + \",\" + b + \",0.1)\";\n    ctx.lineWidth = 7.5 * blurFactor * blurFactor\n    ctx.strokeStyle = \"rgba(\" + r + \",\" + g + \",\" + b + \",0.1)\";\n    this.drawShip(ctx, shipWidth)\n    ctx.lineWidth = 6 * blurFactor\n    ctx.strokeStyle = \"rgba(\" + r + \",\" + g + \",\" + b + \",0.1)\";\n    this.drawShip(ctx, shipWidth)\n    ctx.lineWidth = 4.5;\n    this.drawShip(ctx, shipWidth)\n    ctx.lineWidth = 3;\n    this.drawShip(ctx, shipWidth)\n    ctx.strokeStyle = 'rgb(255, 255, 255)';\n    ctx.lineWidth = 1.5;\n    this.drawShip(ctx, shipWidth)\n    \n    ctx.restore();\n  }\n\n  drawShip(ctx, shipWidth) {\n    ctx.beginPath();\n    ctx.moveTo(0, 0);\n    ctx.lineTo(0, -shipWidth);\n    ctx.lineTo(2 / 3 * shipWidth, -(1 + 1 / 6) * shipWidth); //1\n    ctx.lineTo(1 / 3 * shipWidth, -5 / 6 * shipWidth) // 2\n    ctx.lineTo(1 / 3 * shipWidth, -1 / 3 * shipWidth) // 2.5\n    ctx.lineTo(5 / 6 * shipWidth, -1 / 3 * shipWidth) // 3\n    ctx.lineTo((1 + 1 / 6) * shipWidth, -2 / 3 * shipWidth) // 4\n    ctx.lineTo(shipWidth, 0) // 5\n    ctx.closePath();\n    ctx.stroke();\n  }\n  move(timeDelta) {\n    // timeDelta is number of milliseconds since last move\n    // if the computer is busy the time delta will be larger\n    // in this case the MovingObject should move farther in this frame\n    // velocity of object is how far it should move in 1/60th of a second or something\n    const velocityScale = timeDelta / NORMAL_FRAME_TIME_DELTA,\n    offsetX = this.vel[0] * velocityScale * this.speed,\n    offsetY = this.vel[1] * velocityScale * this.speed;\n    this.pos = [this.pos[0] + offsetX, this.pos[1] + offsetY];\n\n\n\n    if (this.game.isOutOfBounds(this.pos)) {\n      if (this.isWrappable) {\n        this.pos = this.game.wrap(this.pos);\n      } \n    }\n  }\n\n  // move(timeDelta){\n  //   const velocityScale = timeDelta / NORMAL_FRAME_TIME_DELTA;\n  //   this.pos[0] += this.vel[0] * velocityScale + this.acc[0] * (velocityScale * velocityScale) / 2;\n  //   this.pos[1] += this.vel[1] * velocityScale + this.acc[1] * (velocityScale * velocityScale) / 2;\n  //   this.vel[0] += this.acc[0] * velocityScale;\n  //   this.vel[1] += this.acc[1] * velocityScale;\n\n  //   if (this.game.isOutOfBounds(this.pos)) {\n  //     if (this.isWrappable) {\n  //       this.pos = this.game.wrap(this.pos);\n  //     } else {\n  //       this.remove();\n  //     }\n  //   }\n  // }\n\n\n  setFireAngle(mousePos) {\n    if (mousePos === undefined){\n      mousePos = this.mousePos;\n    } else {\n      this.mousePos = mousePos\n    }\n    let dy = mousePos[1] - this.pos[1];\n    let dx = mousePos[0] - this.pos[0];\n    this.fireAngle =  Math.atan2(dy, dx)\n\n  }\n  \n\n  fireBullet(e) {\n    \n    let shipvx = this.vel[0];\n    let shipvy = this.vel[1];\n\n    let relBulletVelX1 = Bullet.SPEED * Math.cos(this.fireAngle);\n    let relBulletVelY1 = Bullet.SPEED * Math.sin(this.fireAngle);\n    let relBulletVelX2 = (Bullet.SPEED - 0.5) * Math.cos(this.fireAngle + Math.PI / 32);\n    let relBulletVelY2 = (Bullet.SPEED - 0.5) * Math.sin(this.fireAngle + Math.PI / 32);\n    let relBulletVelX3 = (Bullet.SPEED - 0.5) * Math.cos(this.fireAngle - Math.PI / 32);\n    let relBulletVelY3 = (Bullet.SPEED - 0.5) * Math.sin(this.fireAngle - Math.PI / 32);\n\n    const bulletVel1 = [shipvx + relBulletVelX1, shipvy + relBulletVelY1];\n    const bulletVel2 = [shipvx + relBulletVelX2, shipvy + relBulletVelY2];\n    const bulletVel3 = [shipvx + relBulletVelX3, shipvy + relBulletVelY3];\n\n    const bullet1 = new Bullet({\n      pos: this.pos,\n      vel: bulletVel1,\n      color: this.color,\n      game: this.game\n    });\n    const bullet2 = new Bullet({\n      pos: this.pos,\n      vel: bulletVel2,\n      color: this.color,\n      game: this.game\n    });\n    const bullet3 = new Bullet({\n      pos: this.pos,\n      vel: bulletVel3,\n      color: this.color,\n      game: this.game\n    });\n\n    this.game.add(bullet1);\n    this.game.add(bullet2);\n    this.game.add(bullet3);\n  }\n\n  power(impulse) {\n    this.vel = impulse\n  }\n\n  relocate() {\n    // this.game.die();\n    // this.pos = this.game.randomPosition();\n    // this.vel = [0, 0];\n    // this.acc = [0, 0];\n  }\n}\n\nShip.RADIUS = 1;\nmodule.exports = Ship;\nconst NORMAL_FRAME_TIME_DELTA = 1000 / 60;\n\n","\nclass GameView {\n  constructor(game, ctx, canvasEl) {\n    this.ctx = ctx;\n    this.game = game;\n    this.ship = this.game.addShip();\n    this.canvasEl = canvasEl;\n  }\n\n  bindKeyHandlers() {\n    const ship = this.ship;\n    Object.keys(GameView.MOREMOVES).forEach((k) => {\n      const move = GameView.MOREMOVES[k];\n      key(k, () => { ship.power(move); });\n    });\n\n    key(\"m\", () => {\n      this.game.muted = !this.game.muted;\n      if (this.game.muted) {\n        this.theme.pause();\n      } else {\n        this.theme.play();\n      }\n    })\n\n    window.addEventListener('mousemove', (e) => {\n      const x = {x: e.layerX};\n      const y = {y: e.layerY};\n      const mousePos = [e.layerX, e.layerY];\n      \n      ship.setFireAngle(mousePos);\n      \n    });\n    \n    // key(\"space\", () => { ship.fireBullet(); });\n  }\n\n  start() {\n    this.bindKeyHandlers();\n    this.lastTime = 0;\n    window.addEventListener('click', (e) => {\n      this.theme = new Audio(\"GEOWars/sounds/Geometry_OST.mp3\");\n      this.theme.id = \"OST\";\n\n      this.game.ships[0].start();\n      requestAnimationFrame(this.animate.bind(this));\n    });\n  }\n  \n  animate(time) {\n    const timeDelta = time - this.lastTime;\n    this.game.step(timeDelta, this.ctx);\n    this.game.draw(this.ctx);\n    this.lastTime = time;\n    // every call to animate requests causes another call to animate\n    requestAnimationFrame(this.animate.bind(this));\n  }\n}\n\nGameView.MOVES = {\n  w: [0, -1],\n  a: [-1, 0],\n  s: [0, 1],\n  d: [1, 0],\n};\n\nGameView.MOREMOVES = {\n  c: [0.70710678118, 0.70710678118],\n  x: [0,1],\n  z: [-0.70710678118, 0.70710678118],\n  a: [-1,0],\n  s: [-1,0],\n  w: [-0.70710678118, -0.70710678118],\n  e: [0,-1],\n  r: [0.70710678118, -0.70710678118],\n  f: [1,0],\n  d: [1,0]\n}\n\nmodule.exports = GameView;\n"," const Particle = require(\"./particle\")\n\n\nconst speeds = [1, 2, 3, 4];\n\n\nclass BulletWallExplosion{\n  constructor(xpos, ypos, ctx, game, explosionId) {\n    this.COLORS = [\n      [\"rgba(152,245,23\", \"rgba(126,185,43\", \"rgba(189,236,122\", \"rgba(103,124,74\"],\n      [\"rgba(255,241,44\", \"rgba(245,236,109\", \"rgba(165,160,87\", \"rgba(177,167,28\"],\n      [\"rgba(18,225,252\", \"rgba(60,198,216\", \"rgba(113,223,238\", \"rgba(149,220,230\"],\n      [\"rgba(252,87,224\", \"rgba(204,72,182\", \"rgba(170,72,154\", \"rgba(250,137,231\"],\n      [\"rgba(190,86,250\", \"rgba(159,96,196\", \"rgba(87,17,128\", \"rgba(199,150,228\"]\n    ]\n    this.color = this.COLORS[Math.floor(Math.random() * this.COLORS.length)]\n    this.game = game;\n    this.particleNum = 20;\n    this.particles = [];\n    this.explosionId;\n\n\n    for (var i = 0; i < this.particleNum; i++) {\n      const particleId = i;\n\n      const speed = speeds[Math.floor(Math.random() * speeds.length)]\n      this.particles.push(new Particle(xpos, ypos, speed, ctx, game, game.particleExplosions.length, particleId, this.color));\n    }\n  }\n\n  move(deltaTime) {\n    for (let i = 0; i < this.particles.length; i++) {\n      if (this.particles[i].active === true) {\n        this.particles[i].move(deltaTime);\n      }\n    }\n  }\n  draw(ctx) {\n    for (let i = 0; i < this.particles.length; i++) {\n      if (this.particles[i].active === true) {\n        this.particles[i].draw(ctx);\n\n      }\n    }\n\n    // ANIMATION = requestAnimationFrame(drawScene);\n  }\n\n}\n\n\n\n\n  module.exports = BulletWallExplosion;","class EnemySpawn{\n  constructor(enemy, game){\n    this.enemy = enemy;\n    this.game = game;\n    this.initialSpawningScale = 1.5;\n    this.spawningScale = 1.5;\n    this.lifeTime = 1000;\n    this.existTime = 0;\n\n    if (!this.game.muted){\n      this.game.soundsToPlay[this.enemy.spawnSound.url] = this.enemy.spawnSound;\n    }\n\n  }\n  move(timeDelta) {\n    \n    this.existTime += timeDelta;\n\n    if (this.existTime >= this.lifeTime){\n      this.spawn(this.enemy)\n      this.game.remove(this)\n    }\n\n    let cycleSpeedScale = timeDelta / NORMAL_FRAME_TIME_DELTA;\n    let cycleSpeed = 0.1;\n\n    if (this.spawningScale < 0.7){\n      this.spawningScale = this.initialSpawningScale\n    } else {\n      this.spawningScale -= cycleSpeed * cycleSpeedScale;\n    }\n  }\n\n  draw (ctx) {\n\n    let pos = this.pos\n    this.enemy.draw(ctx, this.spawningScale)\n  }\n\n  spawn(enemy){\n    this.game.add(enemy)\n  }\n\n  remove(){\n    this.game.remove(this)\n  }\n\n}\nconst NORMAL_FRAME_TIME_DELTA = 1000 / 60;\nmodule.exports = EnemySpawn;","// direction of the particle is the direction of the velocity vector\n// the direction of the \n// the particle dies when the hue reaches 0 \n\n// random movement angle created\n// initial speed (scale)\n// vel = Util.vectorCartisian(angle, scale)\n//\n// \n\nconst Util = require(\"../util\");\n\nclass Particle {\n  constructor(xpos, ypos, initialSpeed, ctx, game, explosionId, particleID, colors) {\n    this.game = game;\n    this.active = true;\n    this.color = colors[Math.floor(colors.length * Math.random())];\n    this.particleId;\n    this.explosionId;\n\n    this.pos = [xpos, ypos]; // x and y position\n\n    this.rectLength = 15;\n    this.rectWidth = 2;\n    // this.r = this.rand(200, 10, 0);\n    this.speed = initialSpeed;\n    this.movementAngle = Math.random() * Math.PI * 2;\n    // this.vx = this.initialSpeed * Math.cos(this.movementAngle);\n    // this.vy = this.initialSpeed * Math.sin(this.movementAngle);\n    this.vel = Util.vectorCartisian(this.movementAngle, this.speed)\n    this.explosionDeceleration = 0.1; // in the direction the particle is moving\n    this.acc = [-this.explosionDeceleration * Math.cos(this.movementAngle), -this.explosionDeceleration * Math.sin(this.movementAngle)]\n\n    this.opacity = Math.random() * 0.5 + 0.5;\n    this.active = true;\n    this.hue = Math.random() * 0.3 + 0.6;\n  }\n\n  // private method\n  rand(max, min, _int) {\n    var max = (max === 0 || max) ? max : 1,\n      min = min || 0,\n      gen = min + (max - min) * Math.random();\n\n    return (_int) ? Math.round(gen) : gen;\n  };\n\n  move(timeDelta) {\n    const velocityScale = timeDelta / NORMAL_FRAME_TIME_DELTA;\n    this.updateAcceleration()\n    this.movementAngle = Math.atan2(this.vel[1], this.vel[0])\n    this.pos[0] += this.vel[0] * velocityScale + (this.acc[0] - this.explosionDeceleration * Math.cos(this.movementAngle)) * (velocityScale * velocityScale) / 2;\n    this.pos[1] += this.vel[1] * velocityScale + (this.acc[1] - this.explosionDeceleration * Math.sin(this.movementAngle)) * (velocityScale * velocityScale) / 2;\n    this.vel[0] += this.acc[0] * velocityScale;\n    this.vel[1] += this.acc[1] * velocityScale;\n    this.acc = [-this.explosionDeceleration * Math.cos(this.movementAngle), -this.explosionDeceleration * Math.sin(this.movementAngle)]\n    this.rectLength -= 0.25;\n    this.hue -= 0.01;\n  }\n\n  updateAcceleration() {\n    for (let i = 0; i < this.game.singularities.length; i++) {\n      const singularity = this.game.singularities[i];\n      singularity.influenceAcceleration(this)\n    }\n  }\n\n  draw(ctx) {\n\n    this.active = true;\n    // this.x += this.vx;\n    // this.y += this.vy;\n\n    if (this.hue < 0.1 || this.rectLength < 0.25 || ((Math.abs(this.vel[0]) + Math.abs(this.vel[1])) < 0.25)) {\n      this.remove();\n    } else {\n      let pos = this.pos;\n\n      let l = 15;\n      let w = 5;\n      let movementDirection = Math.atan2(this.vel[0], -this.vel[1])\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.translate(pos[0], pos[1]);\n      ctx.rotate(movementDirection + 2 * Math.PI);\n\n      ctx.beginPath();\n      ctx.strokeStyle = `${this.color},${this.hue})`;\n      ctx.lineWidth = this.rectWidth;\n\n      ctx.moveTo(0, 0); //1\n      ctx.lineTo(0, this.rectLength); //2\n\n      ctx.closePath();\n      ctx.stroke();\n      ctx.restore();\n\n    }\n  }\n\n  remove() {\n    this.game.remove(this);\n  }\n}\n\nconst NORMAL_FRAME_TIME_DELTA = 1000 / 60;\nmodule.exports = Particle;","const Particle = require(\"./particle\")\n\n\n\nconst speeds = [7,6,5.5,5,4];\n\nclass ParticleExplosion{\n  constructor(xpos, ypos, ctx, game, explosionId){\n    this.COLORS = [\n      [\"rgba(152,245,23\", \"rgba(126,185,43\", \"rgba(189,236,122\", \"rgba(103,124,74\"],\n      [\"rgba(255,241,44\", \"rgba(245,236,109\", \"rgba(165,160,87\", \"rgba(177,167,28\"],\n      [\"rgba(18,225,252\", \"rgba(60,198,216\", \"rgba(113,223,238\", \"rgba(149,220,230\"],\n      [\"rgba(252,87,224\", \"rgba(204,72,182\", \"rgba(170,72,154\", \"rgba(250,137,231\"],\n      [\"rgba(190,86,250\", \"rgba(159,96,196\", \"rgba(87,17,128\", \"rgba(199,150,228\"]\n    ]\n    this.color = this.COLORS[Math.floor(Math.random() * this.COLORS.length)]\n    this.game = game;\n    this.particleNum = 80;\n    this.particles = [];\n    this.explosionId;\n    for (var i = 0; i < this.particleNum; i++) {\n      const particleId = i;\n      \n      const speed = Math.random() * 3 + 4\n      // const speed = speeds[Math.floor(Math.random() * speeds.length)]\n      this.particles.push(new Particle(xpos, ypos, speed, ctx, game, this.explosionId, particleId, this.color));\n    }\n  }\n  \n  move(deltaTime) {\n    for (let i = 0; i < this.particles.length; i++) {\n      if (this.particles[i].active === true) {\n        this.particles[i].move(deltaTime);\n      }\n    }\n  }\n\n  draw(ctx) {\n    for (let i = 0; i < this.particles.length; i++) {\n      if (this.particles[i].active === true) {\n        this.particles[i].draw(ctx);\n      }\n    }\n\n    // ANIMATION = requestAnimationFrame(drawScene);\n  }\n\n}\n\n\n\n\nmodule.exports = ParticleExplosion;","const Particle = require(\"./particle\")\n\n\n\nconst speeds = [21,19,17,15,13,11,9,7, 6, 5, 4];\n\nclass SingularityExplosion {\n  constructor(xpos, ypos, ctx, game, explosionId) {\n    this.COLORS = [\n      [\"rgba(152,245,23\", \"rgba(126,185,43\", \"rgba(189,236,122\", \"rgba(103,124,74\"],\n      [\"rgba(255,241,44\", \"rgba(245,236,109\", \"rgba(165,160,87\", \"rgba(177,167,28\"],\n      [\"rgba(18,225,252\", \"rgba(60,198,216\", \"rgba(113,223,238\", \"rgba(149,220,230\"],\n      [\"rgba(252,87,224\", \"rgba(204,72,182\", \"rgba(170,72,154\", \"rgba(250,137,231\"],\n      [\"rgba(190,86,250\", \"rgba(159,96,196\", \"rgba(87,17,128\", \"rgba(199,150,228\"]\n    ]\n    this.color = this.COLORS[Math.floor(Math.random() * this.COLORS.length)]\n    this.game = game;\n    this.particleNum = 400;\n    this.particles = [];\n    this.explosionId;\n\n    for (var i = 0; i < this.particleNum; i++) {\n      const particleId = i;\n      const speed = Math.random() * (21 - 4) + 4\n      // const speed = speeds[Math.floor(Math.random() * speeds.length)]\n      this.particles.push(new Particle(xpos, ypos, speed, ctx, game, this.explosionId, particleId, this.color));\n    }\n  }\n\n  move(deltaTime) {\n    for (let i = 0; i < this.particles.length; i++) {\n      if (this.particles[i].active === true) {\n        this.particles[i].move(deltaTime);\n      }\n    }\n  }\n  draw(ctx) {\n\n    for (let i = 0; i < this.particles.length; i++) {\n      if (this.particles[i].active === true) {\n        this.particles[i].draw(ctx);\n      }\n    }\n\n    // ANIMATION = requestAnimationFrame(drawScene);\n  }\n\n}\n\n\n\n\nmodule.exports = SingularityExplosion;","class Sound {\n  constructor(url, volume = 1){\n    this.url = url;\n    this.volume = volume;\n  }\n  play() {\n    this.sound = new Audio(this.url);\n    this.sound.volume = this.volume;\n    this.sound.play();\n  }\n}\n\nmodule.exports = Sound;","\nconst Util = {\n  // Normalize the length of the vector to 1, maintaining direction.\n  dir(vec) {\n    const norm = Util.norm(vec);\n    return Util.scale(vec, 1 / norm);\n  },\n  vectorCartisian(angle,scale){\n\n    let vector = [];\n    vector = [scale * Math.cos(angle), scale * Math.sin(angle)]\n    return vector\n  },\n  // Find distance between two points.\n  dist(pos1, pos2) {\n    return Math.sqrt(\n      Math.pow(pos1[0] - pos2[0], 2) + Math.pow(pos1[1] - pos2[1], 2)\n    );\n  },\n  // Find the length of the vector.\n  norm(vec) {\n    return Util.dist([0, 0], vec);\n  },\n  // Return a randomly oriented vector with the given length.\n  randomVec(length) {\n    const deg = 2 * Math.PI * Math.random();\n    return Util.scale([Math.sin(deg), Math.cos(deg)], length);\n  },\n  // Scale the length of a vector by the given amount.\n  scale(vec, m) {\n    return [vec[0] * m, vec[1] * m];\n  },\n\n  wrap(coord, max) {\n    if (coord < 0) {\n      return max - (coord % max);\n    } else if (coord > max) {\n      return coord % max;\n    } else {\n      return coord;\n    }\n  },\n\n  bounce(shape, max){\n\n    if(shape.pos[0] <= 0 || shape.pos[0] >= max[0]){\n      shape.vel[0] = -shape.vel[0];\n    }\n    if( shape.pos[1] <= 0 || shape.pos[1] >= max[1]){\n      shape.vel[1] = -shape.vel[1];\n    }\n  },\n\n  redirect(arrow, max){\n    if (arrow.pos[0] <= 0 || arrow.pos[0] >= max[0]) {\n      if (arrow.pos[0] <= 0) {\n        arrow.pos[0] = 1\n      }\n      if (arrow.pos[0] >= max[0]) {\n        arrow.pos[0] = max[0] - 1\n      }\n\n      arrow.vel[0] = -arrow.vel[0];\n      arrow.vel[1] = -arrow.vel[1];\n    }\n    if (arrow.pos[1] <= 0 || arrow.pos[1] >= max[1]) {\n      if (arrow.pos[1] <= 0) {\n        arrow.pos[1] = 1\n      }\n      if (arrow.pos[1] >= max[1]) {\n        arrow.pos[1] = max[1] - 1\n      }\n\n\n      arrow.vel[0] = -arrow.vel[0];\n      arrow.vel[1] = -arrow.vel[1];\n    }\n  }\n \n};\n\nmodule.exports = Util;\n"],"sourceRoot":""}