{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/GEOWars.js","webpack:///./lib/game_engine/collider.js","webpack:///./lib/game_engine/game_object.js","webpack:///./lib/game_engine/line_sprite.js","webpack:///./lib/game_engine/physics_component.js","webpack:///./lib/game_engine/sound.js","webpack:///./lib/game_engine/transform.js","webpack:///./lib/game_engine/util.js","webpack:///./lib/game_script.js","webpack:///./lib/game_view.js","webpack:///./lib/particles/bullet_wall_explosion.js","webpack:///./lib/particles/enemy_spawn.js","webpack:///./lib/particles/particle.js","webpack:///./lib/particles/particle_explosion.js","webpack:///./lib/particles/singularity_explosion.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;ACnEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;ACXD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb,cAAc;;AAEd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,G;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iD;;;;;;;;;;;ACjDA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;;;;;;;;;;;;ACvEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,4B;;;;;;;;;;;ACbA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,uB;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK,O;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,C;;;;;;;;;;;;AC1DA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;AACL;AACA;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,sBAAsB,gBAAgB;AACtC;AACA;;AAEA;AACA;AACA,OAAO;;AAEP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,C;;;;;;;;;;;;AC5OA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,oBAAoB,8BAA8B,EAAE;AACpD,KAAK;;AAEL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;;AAEL;AACA,iBAAiB;AACjB,iBAAiB;AACjB;;AAEA;;AAEA,KAAK;;AAEL,2BAA2B,mBAAmB,EAAE;AAChD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AChFA;;;AAGA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,mBAAmB,sBAAsB;AACzC;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;;;;AAKA,uC;;;;;;;;;;;ACrDA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,4B;;;;;;;;;;;ACnDA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,oCAAoC;AACvD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,WAAW,GAAG,SAAS;AAClD;;AAEA,uBAAuB;AACvB,qCAAqC;;AAErC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,0B;;;;;;;;;;;AC3GA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;AAKA,mC;;;;;;;;;;;ACpDA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;AAKA,sC","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./lib/GEOWars.js\");\n","const GameScript = require(\"./game_script\");\nconst GameView = require(\"./game_view\");\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const canvasEl = document.getElementsByTagName(\"canvas\")[0];\n  canvasEl.width = GameScript.DIM_X;\n  canvasEl.height = GameScript.DIM_Y;\n\n  const ctx = canvasEl.getContext(\"2d\");\n  const gameEngine = new GameEngine();\n  new GameView(gameEngine, ctx, canvasEl).start();\n});\n\n","// engine takes in collider with gameobject type as string\n// this way subscriptions can be done via string names\n// enemy is subscribed to bullets..\n// each enemy will check every bullet\n// convert gameobject type to string\n// colliders can be added without subscriptions\n// subscriptions are an array of strings stored with the collider\n\n// collider: object absolute transform\n// collider { gameObject gameObject, \"subscriptions\" [\"name\", \"name\"] }\n// colliders {\"BoxBox\" [collider, collider]}\n\nconst Util = require(\"./util\")\n\nclass Collider {\n  constructor(type, gameObject, radius = 5, subscriptionTypes = [], subscriptions = false) {\n    this.objectType = gameObject.constructor.name\n    this.type = type\n    this.subscriptions = subscriptions\n    this.subscriptionTypes = subscriptionTypes\n    this.radius = radius\n    this.gameObject = gameObject\n  }\n  // wondering if collision should cascade up the parent objects\n  // nope not yet anyway\n\n  collisionCheck(otherCollider) {\n    const centerDist = Util.dist(this.gameObject.transform.pos, otherCollider.gameObject.transform.pos);\n    if (centerDist < (this.radius + otherCollider.radius)){\n      this.gameObject.onCollision(otherCollider, this.type)\n    }\n  } \n}\n\n// on\n\n// When you add new things that effect other things\n// like a new type of bullet, singularity effect, etc\n// you just have to add that functionality to the bullet\n// add the things it effects as things \n// the collider subscribes to\n// this way you don't have to edit every object type\n// that is effected\n\n// singularity has two colliders\n// outer one for gravity effects \n// inner one for actual hits\n// it's subscribed to everything\n// on collision it changes that object properties either \n// directly or with a object method... preferably","const Util = require(\"./util\");\nconst Sound = require(\"./sound\")\n\nconst Transform = require( \"./transform\")\nconst PhysicsComponent = require(\"./physics_component\")\nconst LineSprite = require(\"./line_sprite\")\nconst Collider = require(\"./collider\")\n\nclass GameObject {\n  constructor(engine) {\n    this.gameEngine = engine\n    this.gameEngine.addGameObject(this)\n    this.transform = new Transform()\n    this.childObjects = []\n    this.physicsComponent = null \n    this.lineSprite = null\n    this.parentObject = null\n    this.colliders = []\n    // this.color = options.color;\n    // this.game = options.game;\n    // this.bounce = true;\n    // this.speed = 0;\n  }\n\n  addPhysicsComponent() {\n    this.physicsComponent = new PhysicsComponent(this.transform)\n    this.gameEngine.addPhysicsComponent(this.physicsComponent)\n  }\n\n  addLineSprite(lineSprite) {\n    this.lineSprite = lineSprite\n    this.gameEngine.addLineSprite(this.lineSprite)\n  }\n\n  addColider(type, gameObject, radius, subscriptionTypes, subscriptions){\n    // game engine checks every collider with it's subscription types\n    let newCollider = new Collider(type, gameObject, radius, subscriptionTypes, subscriptions)\n    this.colliders.append(newCollider)\n    this.gameEngine.addCollider(newCollider)\n  }\n\n  // store sound in instance\n  playSound(sound){\n    this.gameEngine.queueSound(sound)\n  }\n\n  //hmm. user makes a new game object, then adds it to the parent\n  addChildGameObject(obj){\n    this.childObjects.append(obj)\n    obj.parentTransform = this.transform\n    obj.parentObject = this\n  }\n\n  update() {\n    // overwritten by child class for update scripts\n  }\n\n  onCollision(objectType){\n    // overwritten by child class for handler\n  }\n\n  remove() {\n    this.childObjects.forEach((obj) => {\n      this.gameEngine.remove(obj)\n    })\n    this.gameEngine.remove(this);\n  }\n}\n\nconst NORMAL_FRAME_TIME_DELTA = 1000 / 60;\n\nmodule.exports = GameObject;\n","class LineSprite {\n  constructor(transform) {\n    this.drawFunction = draw\n    this.transform = transform \n  }\n\n  draw(ctx) {\n    pos = this.transform.absolutePosition()\n    angle = this.transform.abosluteAngle()\n    this.drawFunction(ctx, pos, angle)\n  }\n}\n\nmodule.exports = LineSprite;","const Util = require(\"./util\");\nconst Sound = require(\"./sound\")\n\nclass PhysicsComponent {\n  constructor(transform, radius) {\n    this.transform = transform\n  }\n\n  move(timeDelta) {\n    // timeDelta is number of milliseconds since last move\n    // if the computer is busy the time delta will be larger\n    // in this case the PhysicsObject should move farther in this frame\n    // velocity of object is how far it should move in 1/60th of a second or something\n    const timeScale = timeDelta / NORMAL_FRAME_TIME_DELTA;\n    this.transform.pos[0] += this.transform.vel[0] * timeScale + this.transform.acc[0] * (timeScale * timeScale) / 2;\n    this.transform.pos[1] += this.transform.vel[1] * timeScale + this.transform.acc[1] * (timeScale * timeScale) / 2;\n    this.transform.vel[0] += this.transform.acc[0] * timeScale;\n    this.transform.vel[1] += this.transform.acc[1] * timeScale;\n\n    this.transform.acc = [0, 0];\n\n  }\n\n}\n\nconst NORMAL_FRAME_TIME_DELTA = 1000 / 60;\n\nmodule.exports = PhysicsComponent;\n","\nclass Sound {\n  constructor(url, volume = 1){\n    this.url = url;\n    this.volume = volume;\n  }\n\n  play() {\n    this.sound = new Audio(this.url);\n    this.sound.volume = this.volume;\n    this.sound.play();\n  }\n}\n\nmodule.exports = Sound;","const Util = require(\"./util\");\nclass Transform {\n  constructor(pos = [0,0], vel = [0,0], acc = [0,0], angle = 0, parentTransform = null){\n    this.parentTransform = parentTransform\n    this.angle = angle\n    this.pos = pos\n    this.vel = vel\n    this.acc = acc\n  }\n\n  // call up the tree of parent transforms until null\n  // performing the transformation each step for the absolute\n  absoluteAngle() {\n    if (this.parentTransform == null) {\n      return this.angle\n    } else {\n      return angleAdd(this.angle, this.parentTransform.absoluteAngle())\n    }\n  }\n\n  absolutePosition() {\n    absPos = []\n    if (this.parentTransform == null){\n      absPos = this.pos\n      return absPos\n    } else { \n      return vectorAdd(this.pos, this.parentTransform.absolutePosition())\n    }\n  }\n\n  absoluteVelocity() {\n    absVel = []\n    if (this.parentTransform == null) {\n      absVel = this.vel\n      return absVel\n    } else {\n      return vectorAdd(this.vel, this.parentTransform.absoluteVelocity())\n    }\n  }\n\n  absoluteAcceleration() {\n    absAcc = []\n    if (this.parentTransform == null) {\n      absAcc = this.acc\n      return absAcc\n    } else {\n      return vectorAdd(this.acc, this.parentTransform.absoluteAcceleration())\n    }\n  }\n\n  vectorAdd(vector1, vector2) {\n    return [vector1[0] + vector1[0], vector1[1] + vector2[1]]\n  }\n\n  angleAdd(angle1, angle2) {\n\n    return (angle1 + angle2) % (2 * Math.PI)\n  }\n\n}","\nconst Util = {\n  // Normalize the length of the vector to 1, maintaining direction.\n  dir(vec) {\n    const norm = Util.norm(vec);\n    return Util.scale(vec, 1 / norm);\n  },\n  vectorCartisian(angle,scale){\n\n    let vector = [];\n    vector = [scale * Math.cos(angle), scale * Math.sin(angle)]\n    return vector\n  },\n  // Find distance between two points.\n  dist(pos1, pos2) {\n    return Math.sqrt(\n      Math.pow(pos1[0] - pos2[0], 2) + Math.pow(pos1[1] - pos2[1], 2)\n    );\n  },\n  // Find the length of the vector.\n  norm(vec) {\n    return Util.dist([0, 0], vec);\n  },\n  // Return a randomly oriented vector with the given length.\n  randomVec(length) {\n    const deg = 2 * Math.PI * Math.random();\n    return Util.scale([Math.sin(deg), Math.cos(deg)], length);\n  },\n  // Scale the length of a vector by the given amount.\n  scale(vec, m) {\n    return [vec[0] * m, vec[1] * m];\n  },\n\n  wrap(coord, max) {\n    if (coord < 0) {\n      return max - (coord % max);\n    } else if (coord > max) {\n      return coord % max;\n    } else {\n      return coord;\n    }\n  },\n\n  bounce(shape, max){\n\n    if(shape.pos[0] <= 0 || shape.pos[0] >= max[0]){\n      shape.vel[0] = -shape.vel[0];\n    }\n    if( shape.pos[1] <= 0 || shape.pos[1] >= max[1]){\n      shape.vel[1] = -shape.vel[1];\n    }\n  },\n\n  redirect(arrow, max){\n    if (arrow.pos[0] <= 0 || arrow.pos[0] >= max[0]) {\n      if (arrow.pos[0] <= 0) {\n        arrow.pos[0] = 1\n      }\n      if (arrow.pos[0] >= max[0]) {\n        arrow.pos[0] = max[0] - 1\n      }\n\n      arrow.vel[0] = -arrow.vel[0];\n      arrow.vel[1] = -arrow.vel[1];\n    }\n    if (arrow.pos[1] <= 0 || arrow.pos[1] >= max[1]) {\n      if (arrow.pos[1] <= 0) {\n        arrow.pos[1] = 1\n      }\n      if (arrow.pos[1] >= max[1]) {\n        arrow.pos[1] = max[1] - 1\n      }\n\n\n      arrow.vel[0] = -arrow.vel[0];\n      arrow.vel[1] = -arrow.vel[1];\n    }\n  }\n \n};\n\nmodule.exports = Util;\n","const Bullet = require(\"./game_objects/bullet\");\nconst Ship = require(\"./game_objects/ship\");\nconst Util = require(\"./game_engine/util\");\nconst Particle = require(\"./particles/particle\");\nconst EnemySpawn = require(\"./particles/enemy_spawn\");\nconst ParticleExplosion = require(\"./particles/particle_explosion\");\nconst BulletWallExplosion = require(\"./particles/bullet_wall_explosion\");\nconst SingularityExplosion = require(\"./particles/singularity_explosion\");\nconst BoxBox = require(\"./game_objects/enemies/boxbox\");\nconst Pinwheel = require(\"./game_objects/enemies/pinwheel\");\nconst Arrow = require(\"./game_objects/enemies/arrow\");\nconst Grunt = require(\"./game_objects/enemies/grunt\");\nconst Weaver = require(\"./game_objects/enemies/weaver\");\nconst Singularity = require(\"./game_objects/enemies/singularity\");\nconst Sound = require(\"./game_engine/sound\")\n\nclass GameScript {\n  constructor(engine) {\n    this.enemies = [];\n    this.bullets = [];\n    this.ships = [];\n    this.particleExplosions = [];\n    this.spawningEnemies = [];\n    this.singularities = [];\n    this.muted = true;\n    this.gameTime = 0;\n    this.spawned = false; // REFACTOR PLEASE\n    this.enemyCreatorList = this.createEnemyCreatorList()\n    this.deathSound = new Audio(\"GEOWars/sounds/Enemy_explode.wav\")\n    this.deathSound.volume = 0.5;\n    this.bulletWallhit = new Audio(\"GEOWars/sounds/bullet_hitwall.wav\")\n    this.bulletWallhit.volume = 0.25;\n\n    this.intervalTiming = 1;\n    this.intervalTime = 0;\n    this.hugeSequenceTime = 0;\n    this.sequenceCount = 0;\n    this.lives = 3;\n    this.addEnemies();\n    this.soundsToPlay = {}\n  }\n\n\n\n  randomArrowDirection() {\n    let angles = [0, Math.PI / 2, Math.PI, Math.PI * 3 / 2]\n    return angles[Math.floor(Math.random() * angles.length) % angles.length]\n  }\n\n  createEnemyCreatorList() {\n    return {\n      BoxBox: (pos) => (new BoxBox({\n        game: this,\n        pos: pos\n      })),\n      Pinwheel: (pos) => (new Pinwheel({\n        game: this,\n        pos: pos\n      })),\n      Arrow: (pos, angle) => (new Arrow({\n        game: this,\n        pos: pos,\n        angle: angle\n      })),\n      Grunt: (pos) => (new Grunt({\n        game: this,\n        pos: pos\n      })),\n      Weaver: (pos) => (new Weaver({\n        game: this,\n        pos: pos\n      })),\n      Singularity: (pos) => (new Singularity({\n        game: this,\n        pos: pos\n      }))\n    };\n\n  }\n\n  randomSpawnEnemy(enemy) {\n    if (this.enemies.length < 50) {\n      let pos = this.randomPosition();\n      let enemyCreators = Object.values(this.enemyCreatorList)\n      let spawn = new EnemySpawn(enemyCreators[Math.floor(Math.random() * enemyCreators.length) % enemyCreators.length](), this);\n      this.add(spawn)\n    }\n  }\n\n  spawnEnemies(spawnList) {\n    if (this.enemies.length < 50) {\n      spawnList.forEach((enemy) => {\n        let spawn = new EnemySpawn(enemy, this)\n        this.add(spawn)\n      })\n    }\n  }\n\n  spawnSequence(delta) {\n    this.intervalTime += delta;\n    // this.gameTime += delta;\n    if (this.intervalTime > (500 * this.intervalTiming) && this.sequenceCount < 10) {\n      this.intervalTime = 0;\n      this.randomSpawnEnemy();\n      this.sequenceCount += 1\n    } else if (this.intervalTime > (2500 * this.intervalTiming) && this.sequenceCount === 10 && this.hugeSequenceTime % 2 === 0) {\n      this.intervalTime = 0\n      this.sequenceCount += 1\n      let enemies_to_spawn = []\n      let randomPos = this.randomPosition();\n      for (let i = 0; i < 2; i++) {\n        for (let j = 0; j < 2; j++) {\n          enemies_to_spawn.push(\n            this.enemyCreatorList[\"BoxBox\"]([i * 40 + randomPos[0], j * 40 + randomPos[1]])\n          )\n        }\n      }\n      this.spawnEnemies(enemies_to_spawn);\n\n    } else if (this.intervalTime > (2500 * this.intervalTiming) && this.sequenceCount === 10 && this.hugeSequenceTime % 2 === 1) {\n      this.intervalTime = 0\n      this.sequenceCount += 1\n      let enemies_to_spawn = []\n      let randomPos = this.randomPosition();\n      for (let i = 0; i < 2; i++) {\n        for (let j = 0; j < 2; j++) {\n          enemies_to_spawn.push(\n            this.enemyCreatorList[\"Weaver\"]([i * 40 + randomPos[0], j * 40 + randomPos[1]])\n          )\n        }\n      }\n      this.spawnEnemies(enemies_to_spawn);\n    } else if (this.intervalTime > (5000 * this.intervalTiming) && this.sequenceCount === 11) {\n      this.intervalTime = 0;\n      this.sequenceCount += 1;\n    } else if (this.intervalTime > 250 && this.sequenceCount < (11 + 15) && (this.sequenceCount > 11) && this.hugeSequenceTime % 2 === 0) {\n      this.intervalTime = 0;\n      this.sequenceCount += 1;\n\n      let enemies_to_spawn = [];\n      let fourCorners = [\n        [40, 40],\n        [Game.DIM_X - 40, 40],\n        [40, Game.DIM_Y - 40],\n        [Game.DIM_X - 40, Game.DIM_Y - 40]\n      ]\n      fourCorners.forEach((corner) => {\n        enemies_to_spawn.push(this.enemyCreatorList[\"Grunt\"](corner))\n      })\n      this.spawnEnemies(enemies_to_spawn);\n    } else if (this.intervalTime > 250 && this.sequenceCount < (11 + 15) && (this.sequenceCount > 11) && this.hugeSequenceTime % 2 === 1) {\n      this.intervalTime = 0;\n      this.sequenceCount += 14;\n\n      let enemies_to_spawn = [];\n      let arrowWallPositions = []\n      let arrowDirection = Math.PI * 3 / 2 + Math.PI\n      for (let i = 40; i < Game.DIM_X; i += 40) {\n        arrowWallPositions.push([i, 50])\n      }\n\n      arrowWallPositions.forEach((position) => {\n        enemies_to_spawn.push(this.enemyCreatorList[\"Arrow\"](position, arrowDirection))\n      })\n\n      this.spawnEnemies(enemies_to_spawn);\n    } else if (this.sequenceCount >= 26) {\n      this.sequenceCount = 0;\n      if (!(this.intervalTiming < 0.5)) {\n        this.intervalTiming *= 0.9;\n      }\n      this.hugeSequenceTime += 1;\n    }\n    // if (this.gameTime % 2000 === 0){\n    //   this.spawned = false\n    // }\n    // if( !this.spawned){\n    //   this.spawnEnemy()\n    //   this.spawned = true\n    // }\n  }\n\n  addShip() {\n    const ship = new Ship({\n      pos: this.randomPosition(),\n      game: this\n    });\n\n    this.add(ship);\n\n    return ship;\n  }\n\n  isOutOfBounds(pos) {\n    return (pos[0] < 0) || (pos[1] < 0) ||\n      (pos[0] > Game.DIM_X) || (pos[1] > Game.DIM_Y);\n  }\n\n  randomPosition() {\n    return [\n      Game.DIM_X * Math.random(),\n      Game.DIM_Y * Math.random(),\n      // 500,300\n    ];\n  }\n\n  updateShipFireAngle() {\n    this.ships[0].setFireAngle()\n  }\n\n  wrap(pos) {\n    return [\n      Util.wrap(pos[0], Game.DIM_X), Util.wrap(pos[1], Game.DIM_Y)\n    ];\n  }\n\n}\n\nGame.BG_COLOR = \"#000000\";\n\nGame.DIM_X = 1000;\nGame.DIM_Y = 600;\n// Game.FPS = 32;\nGame.NUM_BOXES = 10;\nGame.NUM_PINWHEELS = 0;\nGame.NUM_ARROWS = 0;\nGame.NUM_GRUNTS = 0;\nGame.NUM_WEAVERS = 0;\nGame.NUM_SINGULARITIES = 1;\nmodule.exports = Game;\n\nGame.Spawn1 = {\n  BoxBox: 50,\n}\n\nGame.spawnListList = [\n  Game.Spawn1\n]","\nclass GameView {\n  constructor(game, ctx, canvasEl) {\n    this.ctx = ctx;\n    this.game = game;\n    this.ship = this.game.addShip();\n    this.canvasEl = canvasEl;\n  }\n\n  bindKeyHandlers() {\n    const ship = this.ship;\n\n    Object.keys(GameView.MOREMOVES).forEach((k) => {\n      const move = GameView.MOREMOVES[k];\n      key(k, () => { ship.controlsDirection(move); });\n    });\n\n    key(\"m\", () => {\n      this.game.muted = !this.game.muted;\n      if (this.game.muted) {\n        this.theme.pause();\n      } else {\n        this.theme.play();\n      }\n    })\n\n    window.addEventListener('mousemove', (e) => {\n      const x = {x: e.layerX};\n      const y = {y: e.layerY};\n      const mousePos = [e.layerX, e.layerY];\n      \n      ship.setFireAngle(mousePos);\n      \n    });\n    \n    // key(\"space\", () => { ship.fireBullet(); });\n  }\n\n  start() {\n    this.bindKeyHandlers();\n    this.lastTime = 0;\n    window.addEventListener('click', (e) => {\n      this.theme = new Audio(\"GEOWars/sounds/Geometry_OST.mp3\");\n      this.theme.id = \"OST\";\n\n      this.game.ships[0].start();\n      requestAnimationFrame(this.animate.bind(this));\n    });\n  }\n  \n  animate(time) {\n    const timeDelta = time - this.lastTime;\n    this.game.step(timeDelta, this.ctx);\n    this.game.draw(this.ctx);\n    this.lastTime = time;\n    // every call to animate requests causes another call to animate\n    requestAnimationFrame(this.animate.bind(this));\n  }\n}\n\nGameView.MOVES = {\n  w: [0, -1],\n  a: [-1, 0],\n  s: [0, 1],\n  d: [1, 0],\n};\n\nGameView.MOREMOVES = {\n  c: [0.70710678118, 0.70710678118],\n  x: [0,1],\n  z: [-0.70710678118, 0.70710678118],\n  a: [-1,0],\n  s: [-1,0],\n  w: [-0.70710678118, -0.70710678118],\n  e: [0,-1],\n  r: [0.70710678118, -0.70710678118],\n  f: [1,0],\n  d: [1,0]\n}\n\nmodule.exports = GameView;\n"," const Particle = require(\"./particle\")\n\n\nconst speeds = [1, 2, 3, 4];\n\n\nclass BulletWallExplosion{\n  constructor(xpos, ypos, ctx, game, explosionId) {\n    this.COLORS = [\n      [\"rgba(152,245,23\", \"rgba(126,185,43\", \"rgba(189,236,122\", \"rgba(103,124,74\"],\n      [\"rgba(255,241,44\", \"rgba(245,236,109\", \"rgba(165,160,87\", \"rgba(177,167,28\"],\n      [\"rgba(18,225,252\", \"rgba(60,198,216\", \"rgba(113,223,238\", \"rgba(149,220,230\"],\n      [\"rgba(252,87,224\", \"rgba(204,72,182\", \"rgba(170,72,154\", \"rgba(250,137,231\"],\n      [\"rgba(190,86,250\", \"rgba(159,96,196\", \"rgba(87,17,128\", \"rgba(199,150,228\"]\n    ]\n    this.color = this.COLORS[Math.floor(Math.random() * this.COLORS.length)]\n    this.game = game;\n    this.particleNum = 20;\n    this.particles = [];\n    this.explosionId;\n\n\n    for (var i = 0; i < this.particleNum; i++) {\n      const particleId = i;\n\n      const speed = speeds[Math.floor(Math.random() * speeds.length)]\n      this.particles.push(new Particle(xpos, ypos, speed, ctx, game, game.particleExplosions.length, particleId, this.color));\n    }\n  }\n\n  move(deltaTime) {\n    for (let i = 0; i < this.particles.length; i++) {\n      if (this.particles[i].active === true) {\n        this.particles[i].move(deltaTime);\n      }\n    }\n  }\n  draw(ctx) {\n    for (let i = 0; i < this.particles.length; i++) {\n      if (this.particles[i].active === true) {\n        this.particles[i].draw(ctx);\n\n      }\n    }\n\n    // ANIMATION = requestAnimationFrame(drawScene);\n  }\n\n}\n\n\n\n\n  module.exports = BulletWallExplosion;","const GameObject = require(\"../game_engine/game_object\")\n\nclass EnemySpawn extends GameObject{\n  constructor(parent, game){\n    this.enemy = parent;\n    this.game = game;\n    this.initialSpawningScale = 1.5;\n    this.spawningScale = 1.5;\n    this.lifeTime = 1000;\n    this.existTime = 0;\n    \n    if (!this.game.muted){\n      this.game.soundsToPlay[this.enemy.spawnSound.url] = this.enemy.spawnSound;\n    }\n\n  }\n  move(timeDelta) {\n    \n    this.existTime += timeDelta;\n\n    if (this.existTime >= this.lifeTime){\n      this.spawn(this.enemy)\n      this.game.remove(this)\n    }\n\n    let cycleSpeedScale = timeDelta / NORMAL_FRAME_TIME_DELTA;\n    let cycleSpeed = 0.1;\n\n    if (this.spawningScale < 0.7){\n      this.spawningScale = this.initialSpawningScale\n    } else {\n      this.spawningScale -= cycleSpeed * cycleSpeedScale;\n    }\n  }\n\n  draw (ctx) {\n\n    let pos = this.pos\n    this.enemy.draw(ctx, this.spawningScale)\n  }\n\n  spawn(enemy){\n    this.game.add(enemy)\n  }\n\n  remove(){\n    this.game.remove(this)\n  }\n\n}\nconst NORMAL_FRAME_TIME_DELTA = 1000 / 60;\nmodule.exports = EnemySpawn;","// direction of the particle is the direction of the velocity vector\n// the direction of the \n// the particle dies when the hue reaches 0 \n\n// random movement angle created\n// initial speed (scale)\n// vel = Util.vectorCartisian(angle, scale)\n//\n// \n\nconst Util = require(\"../game_engine/util\");\n\nclass Particle {\n  constructor(xpos, ypos, initialSpeed, ctx, game, explosionId, particleID, colors) {\n    this.game = game;\n    this.active = true;\n    this.color = colors[Math.floor(colors.length * Math.random())];\n    this.particleId;\n    this.explosionId;\n\n    this.pos = [xpos, ypos]; // x and y position\n\n    this.rectLength = 15;\n    this.rectWidth = 2;\n    // this.r = this.rand(200, 10, 0);\n    this.speed = initialSpeed;\n    this.movementAngle = Math.random() * Math.PI * 2;\n    // this.vx = this.initialSpeed * Math.cos(this.movementAngle);\n    // this.vy = this.initialSpeed * Math.sin(this.movementAngle);\n    this.vel = Util.vectorCartisian(this.movementAngle, this.speed)\n    this.explosionDeceleration = 0.1; // in the direction the particle is moving\n    this.acc = [-this.explosionDeceleration * Math.cos(this.movementAngle), -this.explosionDeceleration * Math.sin(this.movementAngle)]\n\n    this.opacity = Math.random() * 0.5 + 0.5;\n    this.active = true;\n    this.hue = Math.random() * 0.3 + 0.6;\n  }\n\n  // private method\n  rand(max, min, _int) {\n    var max = (max === 0 || max) ? max : 1,\n      min = min || 0,\n      gen = min + (max - min) * Math.random();\n\n    return (_int) ? Math.round(gen) : gen;\n  };\n\n  move(timeDelta) {\n    const velocityScale = timeDelta / NORMAL_FRAME_TIME_DELTA;\n    this.updateAcceleration()\n    this.movementAngle = Math.atan2(this.vel[1], this.vel[0])\n    this.pos[0] += this.vel[0] * velocityScale + (this.acc[0] - this.explosionDeceleration * Math.cos(this.movementAngle)) * (velocityScale * velocityScale) / 2;\n    this.pos[1] += this.vel[1] * velocityScale + (this.acc[1] - this.explosionDeceleration * Math.sin(this.movementAngle)) * (velocityScale * velocityScale) / 2;\n    this.vel[0] += this.acc[0] * velocityScale;\n    this.vel[1] += this.acc[1] * velocityScale;\n    this.acc = [-this.explosionDeceleration * Math.cos(this.movementAngle), -this.explosionDeceleration * Math.sin(this.movementAngle)]\n    this.rectLength -= 0.25;\n    this.hue -= 0.01;\n  }\n\n  updateAcceleration() {\n    for (let i = 0; i < this.game.singularities.length; i++) {\n      const singularity = this.game.singularities[i];\n      singularity.influenceAcceleration(this)\n    }\n  }\n\n  draw(ctx) {\n\n    this.active = true;\n    // this.x += this.vx;\n    // this.y += this.vy;\n\n    if (this.hue < 0.1 || this.rectLength < 0.25 || ((Math.abs(this.vel[0]) + Math.abs(this.vel[1])) < 0.25)) {\n      this.remove();\n    } else {\n      let pos = this.pos;\n\n      let l = 15;\n      let w = 5;\n      let movementDirection = Math.atan2(this.vel[0], -this.vel[1])\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.translate(pos[0], pos[1]);\n      ctx.rotate(movementDirection + 2 * Math.PI);\n\n      ctx.beginPath();\n      ctx.strokeStyle = `${this.color},${this.hue})`;\n      ctx.lineWidth = this.rectWidth;\n\n      ctx.moveTo(0, 0); //1\n      ctx.lineTo(0, this.rectLength); //2\n\n      ctx.closePath();\n      ctx.stroke();\n      ctx.restore();\n\n    }\n  }\n\n  remove() {\n    this.game.remove(this);\n  }\n}\n\nconst NORMAL_FRAME_TIME_DELTA = 1000 / 60;\nmodule.exports = Particle;","const Particle = require(\"./particle\")\n\n\n\nconst speeds = [7,6,5.5,5,4];\n\nclass ParticleExplosion{\n  constructor(xpos, ypos, ctx, game, explosionId){\n    this.COLORS = [\n      [\"rgba(152,245,23\", \"rgba(126,185,43\", \"rgba(189,236,122\", \"rgba(103,124,74\"],\n      [\"rgba(255,241,44\", \"rgba(245,236,109\", \"rgba(165,160,87\", \"rgba(177,167,28\"],\n      [\"rgba(18,225,252\", \"rgba(60,198,216\", \"rgba(113,223,238\", \"rgba(149,220,230\"],\n      [\"rgba(252,87,224\", \"rgba(204,72,182\", \"rgba(170,72,154\", \"rgba(250,137,231\"],\n      [\"rgba(190,86,250\", \"rgba(159,96,196\", \"rgba(87,17,128\", \"rgba(199,150,228\"]\n    ]\n    this.color = this.COLORS[Math.floor(Math.random() * this.COLORS.length)]\n    this.game = game;\n    this.particleNum = 80;\n    this.particles = [];\n    this.explosionId;\n    for (var i = 0; i < this.particleNum; i++) {\n      const particleId = i;\n      \n      const speed = Math.random() * 3 + 4\n      // const speed = speeds[Math.floor(Math.random() * speeds.length)]\n      this.particles.push(new Particle(xpos, ypos, speed, ctx, game, this.explosionId, particleId, this.color));\n    }\n  }\n  \n  move(deltaTime) {\n    for (let i = 0; i < this.particles.length; i++) {\n      if (this.particles[i].active === true) {\n        this.particles[i].move(deltaTime);\n      }\n    }\n  }\n\n  draw(ctx) {\n    for (let i = 0; i < this.particles.length; i++) {\n      if (this.particles[i].active === true) {\n        this.particles[i].draw(ctx);\n      }\n    }\n\n    // ANIMATION = requestAnimationFrame(drawScene);\n  }\n\n}\n\n\n\n\nmodule.exports = ParticleExplosion;","const Particle = require(\"./particle\")\n\n\n\nconst speeds = [21,19,17,15,13,11,9,7, 6, 5, 4];\n\nclass SingularityExplosion {\n  constructor(xpos, ypos, ctx, game, explosionId) {\n    this.COLORS = [\n      [\"rgba(152,245,23\", \"rgba(126,185,43\", \"rgba(189,236,122\", \"rgba(103,124,74\"],\n      [\"rgba(255,241,44\", \"rgba(245,236,109\", \"rgba(165,160,87\", \"rgba(177,167,28\"],\n      [\"rgba(18,225,252\", \"rgba(60,198,216\", \"rgba(113,223,238\", \"rgba(149,220,230\"],\n      [\"rgba(252,87,224\", \"rgba(204,72,182\", \"rgba(170,72,154\", \"rgba(250,137,231\"],\n      [\"rgba(190,86,250\", \"rgba(159,96,196\", \"rgba(87,17,128\", \"rgba(199,150,228\"]\n    ]\n    this.color = this.COLORS[Math.floor(Math.random() * this.COLORS.length)]\n    this.game = game;\n    this.particleNum = 400;\n    this.particles = [];\n    this.explosionId;\n\n    for (var i = 0; i < this.particleNum; i++) {\n      const particleId = i;\n      const speed = Math.random() * (21 - 4) + 4\n      // const speed = speeds[Math.floor(Math.random() * speeds.length)]\n      this.particles.push(new Particle(xpos, ypos, speed, ctx, game, this.explosionId, particleId, this.color));\n    }\n  }\n\n  move(deltaTime) {\n    for (let i = 0; i < this.particles.length; i++) {\n      if (this.particles[i].active === true) {\n        this.particles[i].move(deltaTime);\n      }\n    }\n  }\n  draw(ctx) {\n\n    for (let i = 0; i < this.particles.length; i++) {\n      if (this.particles[i].active === true) {\n        this.particles[i].draw(ctx);\n      }\n    }\n\n    // ANIMATION = requestAnimationFrame(drawScene);\n  }\n\n}\n\n\n\n\nmodule.exports = SingularityExplosion;"],"sourceRoot":""}